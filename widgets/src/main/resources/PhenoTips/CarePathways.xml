<?xml version='1.0' encoding='UTF-8'?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/
-->

<xwikidoc version="1.1">
  <web>PhenoTips</web>
  <name>CarePathways</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1511376119000</creationDate>
  <parent>PhenoTips.PatientSheet</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1511386066000</date>
  <contentUpdateDate>1511380748000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output=false}}
#set ($testTerm = "CP:01")
#set ($metabolicTerm = "CP:1114")
#set ($careTerm = "CP:02")
#set ($familyCareTerm = "CP:03")
#set ($geneticTerm = "CP:11")
#set ($diagnosticTerm = "CP:12")
#set ($electricalSurveillanceTerm = "CP:24")
#set ($imagingSurveillanceTerm = "CP:23")
#set ($subSpecCareTerm = "CP:21")
#macro (__displayDate $fuzzyDate)
  #if($!{fuzzyDate.opt('year')})$!{fuzzyDate.opt('year')}#{end}#if($!{fuzzyDate.opt('month')})-${stringtool.leftPad($fuzzyDate.opt('month'), 2, '0')}#{end}#if($!{fuzzyDate.opt('day')})-${stringtool.leftPad($fuzzyDate.opt('day'), 2, '0')}#{end}
#end
##
##
#macro (__displayModuleGroup $question $variantNumber $groupTitle $modules $modulesLastIdx $sheet $storageClass $retrieveStoredData $editable)
#if ("$!{groupTitle}" != "" || "$!{variantNumber}" != "")##
  &lt;tr class="table-row variant-label-row"&gt;
    &lt;td colspan="2"&gt;
      &lt;h2 class="module-group-label group-label"&gt;
        &lt;input type="hidden" class="variant-number" value="$!{variantNumber}"&gt;
        #if($!{groupTitle.trim()} != '')
          &lt;p&gt;${groupTitle}&lt;/p&gt;
        #else
          &lt;p&gt;${variantNumber}&lt;/p&gt;
        #end
      &lt;/h2&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
#end##
#foreach ($i in [0..${modulesLastIdx}])
  #set($module = $modules.get($i))
  #if ($!{module.get('module')} == 'family')
    #__buildFamilyModule($module, $question, $variantNumber, $storageClass, $retrieveStoredData, $editable)
  #else
    #__buildCategoryModule($module, $question, $variantNumber, $storageClass, $retrieveStoredData, $editable)
  #end
#end##
#end
##
##
#macro(__buildFamilyModule $module $question $variantNumber $storageClass $retrieveStoredData $editable)
  #set ($subjects = ['mother', 'father', 'sister', 'brother', 'aunt', 'uncle'])
  #set ($familyTesting = $services.vocabularies.care-pathways.search({'is_a': $familyCareTerm}, {'sort': 'nameSort asc'}))
  #foreach ($familyTest in $!{familyTesting})
    #set ($testId = $familyTest.id)
    #set ($testName = $familyTest.name)
    #set ($familyTestObjs = $doc.getObjects($storageClass, 'datum', $testId))
    #set ($storedAffectedMembers = [])
    #foreach ($obj in ${familyTestObjs})
      #if ($obj.getProperty('question').value == $question &amp;&amp; "$!{variantNumber}" == "$!{obj.getProperty('variant').value}")
        #set ($datum = {"count" : $obj.number})
        #foreach ($prop in $obj.xWikiClass.properties)
          #set ($propValue = "$!{obj.getProperty($prop.name).value}")
          #if ($propValue != "")
            #set($discard = $datum.put($prop.name, $propValue))
          #end
        #end
        #set ($discard = $storedAffectedMembers.add($datum))
      #end
    #end
    #__displayFamilyModule($testId, $testName, $subjects, $storedAffectedMembers, $editable)
  #end
  &lt;tr class="table-row family-care-subtitle"&gt;
    &lt;td class="table-cell" colspan="2"&gt;
      Surveillance and/or specialist referral(s) for at risk family members:
    &lt;/td&gt;
  &lt;/tr&gt;
  #__buildCategoryModule($module, $question, $variantNumber, $storageClass, $retrieveStoredData, $editable)
#end
##
##
#macro(__displayFamilyModule $testId $testName $subjects $storedAffectedMembers $editable)
  #if ($editable)##
    &lt;tr class="table-row care-pathways-family-module-container"&gt;
      &lt;input type="hidden" class="cp-current-selection-stored-data" value="$!{escapetool.xml($jsontool.serialize($storedAffectedMembers))}"/&gt;
      &lt;input type="hidden" class="associated-variant-type" value="$!{module.type}"/&gt;
      &lt;td class="table-cell family-test-name"&gt;
        &lt;input class="test-id" value="$!{testId}" type="hidden"/&gt;
        ${testName}
      &lt;/td&gt;
      &lt;td class="table-cell subject-group"&gt;
      #foreach ($subject in $subjects)##
        &lt;span id ="${question}-${module.module}-${subject}#if($variantNumber != '')-${variantNumber}#{end}" class="term-picker ${subject}"&gt;
          &lt;label&gt;&lt;input type="hidden" class="selected-item-id" value="$!{subject}"/&gt;&lt;input type="checkbox"/&gt;&lt;span&gt;$escapetool.xml($services.localization.render("phenotips.carePathways.multiPicker.subject.${subject}"))&lt;/span&gt;&lt;/label&gt;
        &lt;/span&gt;
      #end##
      &lt;/td&gt;
    &lt;/tr&gt;
  #else##
    &lt;tr class="table-row care-pathways-family-module-container-view"&gt;
      &lt;td class="table-cell family-test-data"&gt;
        &lt;table class="table"&gt;
          &lt;tr class="table-row"&gt;
            &lt;td class="table-cell family-test-name"&gt;${testName}:&lt;/td&gt;
            &lt;td class="table-cell subject-group"&gt;
            #if ($storedAffectedMembers.size() == 0)##
              &lt;span class="affected-family-member"&gt;None&lt;/span&gt;
            #else##
              #foreach($person in $storedAffectedMembers)##
                &lt;span class="affected-family-member"&gt;$escapetool.xml($services.localization.render("phenotips.carePathways.multiPicker.subject.${person.subject}"))&lt;/span&gt;
              #end##
            #end##
            &lt;/td&gt;
          &lt;/tr&gt;
        &lt;/table&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  #end##
#end
##
##
#macro(__buildCategoryModule $module $question $variantNumber $storageClass $retrieveStoredData $editable)
  #set ($storedValues = {})##
  #set ($curSubject = $!{module.get('subject')})
  #set ($moduleName = $!{module.get('module')})
  #set ($associatedVariantType = $!{module.get('type')})
  #if ($retrieveStoredData || !$editable)
    #__getStoredValues("$!{question}", "$!{curSubject}", "$!{moduleName}", "$!{associatedVariantType}", "$!{variantNumber}", $storedValues, $storageClass)##
  #end
  #if ($editable)##
    #__buildCategoryModuleEditMode($module, $question, $variantNumber, $storedValues)
  #else
    #__buildCategoryModuleViewMode($module, $question, $variantNumber, $storedValues)
  #end##
#end
##
##
#macro(__buildCategoryModuleViewMode $module $question $variantNumber $storedValues)
  &lt;tr class="table-row care-pathways-module-container-view"&gt;
    &lt;td class="table-cell selector-panel cp-current-selection"&gt;
      &lt;div class="cp-current-selection-panel current-selection-panel" name="$!{question}"&gt;
        &lt;table class="terms-data-table"&gt;
        #if($storedValues.size() == 0)##
          &lt;tr&gt;
            #set ($target = "#if($!{module.subject} != '')$!{module.subject}#{else}$!{module.module}#{end}")##
            &lt;td class="no-data"&gt;&lt;span&gt;No data entered for $!{target}&lt;/span&gt;&lt;/td&gt;
          &lt;/tr&gt;
        #else##
          #foreach($category in $storedValues.keySet())##
            #set ($categoryData = $storedValues.get($category))##
            &lt;tr class="${module.module}_field category-data"&gt;
              &lt;td&gt;
                &lt;table class="summary-group parent-summary-group"&gt;
                  &lt;tr class="term-holder"&gt;
                    &lt;td&gt;&lt;span class="term-data"&gt;&lt;label class="label-field"&gt;${categoryData.label}&lt;/label&gt;&lt;/span&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                    &lt;td class="dialog-holder"&gt;
                      #__displaySummaryItems($categoryData, $displayedData, $!{module.module})
                    &lt;/td&gt;
                  &lt;/tr&gt;
                &lt;/table&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
          #end##
        #end##
        &lt;/table&gt;
      &lt;/div&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
#end
##
##
#macro(__displaySummaryItems $categoryData $displayedData $moduleType)
  #set ($qualifiers = $categoryData.qualifiers)##
  #foreach($qualifier in $qualifiers)##
  &lt;div class="summary-item"&gt;
    &lt;div class="term-details"&gt;
      &lt;dl&gt;
        #foreach($key in $qualifier.keySet())##
          #set ($keyValue = $qualifier.get($key))##
          #set ($keyLabel = "$!{services.vocabularies.care-pathways.getTerm($keyValue).name}")
          #set ($displayedData = {
            "datum" :
              {
                "displayedName" : $!escapetool.xml($services.localization.render("phenotips.carePathways.detailsDialog.datum.title")),
                "displayedValue" : "#if($!{keyLabel} != '')$!{keyLabel}#{else}$keyValue#{end}"
              },
            "laboratory" :
              {
                "displayedName" : $!escapetool.xml($services.localization.render("phenotips.carePathways.detailsDialog.laboratory.title"))
              },
            "date_pursued_fuzzy" :
              {
                "displayedName" : $!escapetool.xml($services.localization.render("phenotips.carePathways.${moduleType}.detailsDialog.datePicker.date_pursued.title")),
                "displayedValue" : "#__displayDate($keyValue)"
              },
            "date_recommended_fuzzy" :
              {
                "displayedName" : $!escapetool.xml($services.localization.render("phenotips.carePathways.${moduleType}.detailsDialog.datePicker.date_recommended.title")),
                "displayedValue" : "#__displayDate($keyValue)"
              },
            "notes" :
              {
                "displayedName" : $!escapetool.xml($services.localization.render("phenotips.carePathways.detailsDialog.notes.title"))
              },
            "subject" :
              {
                "displayedName" : $!escapetool.xml($services.localization.render("phenotips.carePathways.detailsDialog.subject.title")),
                "displayedValue" : "#if($keyValue != 'proband')$!{keyValue}#{end}"
              }
          })##
          #set ($itemSettings = $displayedData.get($key))
          #if ($itemSettings)##
            #set ($mappedVal = $!{itemSettings.displayedValue})
            #set ($displayedVal = "#if($mappedVal)$!{mappedVal}#{else}$!{keyValue}#{end}")##
            #if ($displayedVal != '')##
              #set ($displayedName = "$!{itemSettings.displayedName}")##
              &lt;dt class="$key#if($!{displayedName} == '') hidden#{end}"&gt;${displayedName}&lt;/dt&gt;
              &lt;dd class="$key"&gt;${displayedVal}&lt;/dd&gt;
            #end##
          #end##
        #end##
      &lt;/dl&gt;
      &lt;div class="clearfloats"&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  #end##
#end
##
##
#macro(__buildCategoryModuleEditMode $module $question $variantNumber $storedValues)
  #set ($curSubject = $!{module.get('subject')})
  #set ($moduleName = $!{module.get('module')})
  #set ($curSubmodule = $!{module.get('submodule')})
  #set ($dates = $!{module.get('dates')})
  #set ($withDates = "#if($!dates &amp;&amp; $!{dates.size()}) with-mandatory-dates#{end}")
  #set ($associatedVariantType = $!{module.get('type')})
  &lt;tr class="table-row care-pathways-module-container$!{withDates}"&gt;
    &lt;td class="table-cell selector-panel cp-categories"&gt;
      &lt;h3&gt;&lt;span&gt;&lt;strong&gt;Categories&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
      &lt;div class="cp-categories-panel browse-categories-panel"&gt;
        #__displayModule("$!{moduleName}", "$!{curSubmodule}", "$!{question}", "$!{variantNumber}", $storedValues)
      &lt;/div&gt;
    &lt;/td&gt;
    &lt;td class="table-cell selector-panel cp-current-selection"&gt;
      &lt;h3&gt;&lt;span&gt;&lt;strong&gt;Current selection&lt;/strong&gt;&lt;/span&gt;&lt;/h3&gt;
      &lt;div class="cp-current-selection-panel current-selection-panel" name="$!{question}"&gt;
        &lt;input type="hidden" name="moduleType" value="$!{moduleName}"/&gt;
        &lt;input type="hidden" class="associated-variant-type" value="$!{associatedVariantType}"/&gt;
        &lt;input type="hidden" class="associated-variant-number" value="$!{variantNumber}"/&gt;
        &lt;input type="hidden" class="cp-current-selection-subject" value="$!{curSubject}"/&gt;
        &lt;input type="hidden" class="cp-current-selection-dates" value="$!{escapetool.xml($jsontool.serialize($dates))}"/&gt;
        &lt;input type="hidden" class="cp-current-selection-stored-data" value="$!{escapetool.xml($jsontool.serialize($storedValues))}"/&gt;
        &lt;table class="terms-data-table"&gt;&lt;/table&gt;
      &lt;/div&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
#end
##
##
#macro(__getStoredValues $questionId $subject $module $type $variantNumber $categories $qualifierClassName)
  #set ($qualifierObjects = $doc.getObjects($qualifierClassName, 'question', $questionId))
  #if ($qualifierObjects)
    #foreach ($q in $qualifierObjects)
      #if (($subject == '' || $q.getProperty('subject').value == $subject) &amp;&amp; ($type == '' || $q.getProperty('type').value == $type) &amp;&amp; ($variantNumber == '' || "$!{q.getProperty('variant').value}" == "$!{variantNumber}") &amp;&amp; ($module == '' || $q.getProperty('module').value == $module))
        #set ($storedDatum = {})
        #set ($parent = "$!{q.getProperty('parent').value}")
        #set ($label = "#__buildLabelPath($parent)")
        #set ($discard = $categories.putIfAbsent($parent, {"id" : $parent, "label" : $label, "affected" : true, "qualifiers" : []}))
        #set ($categoryItems = $categories.get($parent).get("qualifiers"))
        #foreach($prop in $q.xWikiClass.properties)
          #if ($prop.name != "date_pursued_fuzzy" &amp;&amp; $prop.name != "date_recommended_fuzzy")
            #set ($discard = $storedDatum.put($prop.name, "$!{q.getProperty($prop.name).value}"))
          #else
            #set ($discard = $storedDatum.put($prop.name, $jsontool.parseToJSONObject($stringtool.defaultIfBlank("$!{q.getProperty($prop.name).value}", "{}"))))
          #end
        #end
        #set ($discard = $storedDatum.put("count", $q.number))
        #set ($discard = $categoryItems.add($storedDatum))
      #end
    #end
  #end
#end
##
##
#macro(__buildLabelPath $test)
  #set ($excludes = [$testTerm, $careTerm, $familyCareTerm, $geneticTerm, $diagnosticTerm])##
  #if (!$excludes.contains($test))##
    #set ($node = $!{services.vocabularies.care-pathways.getTerm($test)})##
    #if ($node)##
      #set ($macro.accumulatedPath = "$!{node.name}")##
      #if ($node.is_a &amp;&amp; $node.is_a.size() &gt; 0)##
        #set ($nodeId = $node.is_a.get(0))##
        #set ($prefix = "#__buildLabelPath($nodeId)")##
        #set ($macro.accumulatedPath = "#if($!{prefix} != '')$!{prefix} » #{end}$!{macro.accumulatedPath}")##
      #end##
    #else##
      #set ($nodeId = "$stringtool.substringBefore($test, '_other')")##
      #if ($!{services.vocabularies.care-pathways.getTerm($nodeId)})##
        #set ($prefix = "#__buildLabelPath($nodeId)")##
        #set ($macro.accumulatedPath = "#if($!{prefix} != '')$!{prefix} » #{end}Other")##
      #end##
    #end##
    $!{macro.accumulatedPath}##
  #end##
#end##
##
##
#macro (__displayChildren $submoduleName $term $childrenList $question $storedValues $justCategories)
  #set($allChildren = $services.vocabularies.care-pathways.search({'term_category': $term}, {'sort': 'nameSort asc'}))
  #set($macro.numChildren = $childrenList.size())
  #set($macro.expectedNumChildren = $allChildren.size())
  #if ($macro.numChildren &gt; 0)
    #set ($macro.accumulated = "")
    #foreach($item in $childrenList)
      #set ($childrenHtml = "#__displayChildren($submoduleName, $item.id, $services.vocabularies.care-pathways.search({'is_a': $item.id}, {'sort': 'nameSort asc'}), $question, $storedValues, $justCategories)")
      #if ("$!{childrenHtml}" != "")
        #set ($itemName = "$!{item.name}")
        #if ($stringtool.trim("$!{childrenHtml}") != "")
          #set ($otherKey = $stringtool.join([$item.id, '_other'], ''))##
          #set ($macro.accumulated = "${macro.accumulated}&lt;li class='term-entry'&gt;&lt;input class='term-id' type='hidden' value='$!{item.id}'&gt;&lt;label&gt;&lt;span id='cp-expand-tool-${module}-${question}-${item.id}${variantStub}' class='expand-tool fa fa-caret-right'&gt;&lt;/span&gt;&lt;span class='term-name'&gt;$!{itemName}&lt;/span&gt;&lt;/label&gt;&lt;ul&gt;${childrenHtml}&lt;li class='term-entry custom'&gt;&lt;input class='parent-id' type='hidden' value='$!{item.id}'&gt;&lt;label for='cp-add-tool-${module}-${question}-${item.id}${variantStub}_other'&gt;&lt;input id='cp-add-tool-${module}-${question}-${item.id}${variantStub}_other' class='add-tool' type='checkbox' #if($storedValues.containsKey($otherKey))checked#{end}&gt;&lt;input class='submodule-name' type='hidden' value='${submoduleName}'&gt;&lt;span class='term-name'&gt;Other&lt;/span&gt;&lt;/label&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;")
        #else
          #set ($macro.accumulated = "${macro.accumulated}&lt;li class='term-entry'&gt;&lt;input class='term-id' type='hidden' value='$!{item.id}'&gt;&lt;label for='cp-add-tool-${module}-${question}-${item.id}${variantStub}'&gt;&lt;input id='cp-add-tool-${module}-${question}-${item.id}${variantStub}' name='$!{item.id}' class='add-tool' type='checkbox' #if($storedValues.containsKey($item.id))checked#{end}&gt;&lt;input class='submodule-name' type='hidden' value='${submoduleName}'&gt;&lt;span class='term-name'&gt;$!{itemName}&lt;/span&gt;&lt;/label&gt;&lt;/li&gt;")
        #end
      #elseif ("$!{childrenHtml}" == "" &amp;&amp; ($macro.expectedNumChildren &gt; $macro.numChildren || $justCategories))
        #set ($macro.accumulated = "${macro.accumulated}&lt;li class='term-entry'&gt;&lt;input class='term-id' type='hidden' value='$!{item.id}'&gt;&lt;label for='cp-add-tool-${module}-${question}-${item.id}${variantStub}'&gt;&lt;input id='cp-add-tool-${module}-${question}-${item.id}${variantStub}' name='$!{item.id}' class='add-tool' type='checkbox' #if($storedValues.containsKey($item.id))checked#{end}&gt;&lt;input class='submodule-name' type='hidden' value='${submoduleName}'&gt;&lt;span class='term-name'&gt;$!{item.name}&lt;/span&gt;&lt;/label&gt;&lt;/li&gt;")
      #end
    #end
    $macro.accumulated
  #end
#end
##
##
#macro (__displayCategories $submoduleName $rootNode $rootChildren $question $storedValues $justCategories)
  #set ($otherId = $stringtool.join([$rootNode, '_other'], ''))##
  &lt;ul&gt;
    #__displayChildren($submoduleName, $rootNode, $rootChildren, $question, $storedValues, $justCategories)
  &lt;li class='term-entry custom'&gt;&lt;input class='parent-id' type='hidden' value='$!{rootNode}'&gt;&lt;label for='cp-add-tool-${module}-${question}-${rootNode}${variantStub}_other'&gt;&lt;input id='cp-add-tool-${module}-${question}-${rootNode}${variantStub}_other' class='add-tool' type='checkbox' #if($storedValues.containsKey($otherId))checked#{end}&gt;&lt;span class='term-name'&gt;Other&lt;/span&gt;&lt;/label&gt;&lt;/li&gt;
  &lt;ul&gt;
#end
##
##
#macro (__displayModule $module $submodule $question $variantNumber $storedValues)
  #set ($variantStub = "#if($variantNumber != '')-${variantNumber}#{end}")
  #if ($module == "test")
    #set ($testNodes = [])
    #set ($geneticNodes = $services.vocabularies.care-pathways.search({'is_a': $geneticTerm}, {'sort': 'nameSort asc', 'fq': "NOT id:${metabolicTerm.replaceAll(':', '\\:')}"}))
    #set ($metabolicNodes = [$services.vocabularies.care-pathways.getTerm($metabolicTerm)])
    #set ($diagnosticNodes = $services.vocabularies.care-pathways.search({'is_a': $diagnosticTerm}, {'sort': 'nameSort asc'}))
    #set ($discard = $testNodes.addAll($geneticNodes))
    #set ($discard = $testNodes.addAll($diagnosticNodes))
    #if ($submodule == "")
      #set ($otherId = $stringtool.join([$testTerm, '_other'], ''))##
      &lt;ul&gt;
      #__displayChildren("genetic", $geneticTerm, $geneticNodes, $question, $storedValues, true)
      #__displayChildren("genetic", $metabolicTerm, $metabolicNodes, $question, $storedValues, false)
      #__displayChildren("diagnostic", $diagnosticTerm, $diagnosticNodes, $question, $storedValues, false)
      &lt;li class='term-entry custom'&gt;&lt;input class='parent-id' type='hidden' value='$testTerm'&gt;&lt;label for='cp-add-tool-${module}-${question}-${testTerm}${variantStub}_other'&gt;&lt;input id='cp-add-tool-${module}-${question}-${testTerm}${variantStub}_other' class='add-tool' type='checkbox' #if($storedValues.containsKey($otherId))checked#{end}&gt;&lt;span class='term-name'&gt;Other&lt;/span&gt;&lt;/label&gt;&lt;/li&gt;
      &lt;ul&gt;
    #elseif ($submodule == "genetic")
      &lt;ul&gt;
      #__displayChildren($submodule, $geneticTerm, $geneticNodes, $question, $storedValues, true)
      #__displayChildren($submodule, $metabolicTerm, $metabolicNodes, $question, $storedValues, false)
      &lt;li class='term-entry custom'&gt;&lt;input class='parent-id' type='hidden' value='$geneticTerm'&gt;&lt;label for='cp-add-tool-${module}-${question}-${geneticTerm}${variantStub}_other'&gt;&lt;input id='cp-add-tool-${module}-${question}-${geneticTerm}${variantStub}_other' class='add-tool' type='checkbox' #if($storedValues.containsKey($otherId))checked#{end}&gt;&lt;span class='term-name'&gt;Other&lt;/span&gt;&lt;/label&gt;&lt;/li&gt;
      &lt;ul&gt;
    #elseif ($submodule == "diagnostic")
      #__displayCategories($submodule, $diagnosticTerm, $diagnosticNodes, $question, $storedValues, false)
    #end
  #elseif ($module == "care")
    #__displayCategories("", $careTerm, $services.vocabularies.care-pathways.search({'is_a': $careTerm}, {'sort': 'nameSort asc'}), $question, $storedValues, false)
  #elseif ($module == "family")
    #set ($careSubset = $services.vocabularies.care-pathways.search({'is_a': $careTerm}, {'sort': 'nameSort asc', 'fq': "id:${electricalSurveillanceTerm.replaceAll(':', '\\:')} OR id:${imagingSurveillanceTerm.replaceAll(':', '\\:')} OR id:${subSpecCareTerm.replaceAll(':', '\\:')}"}))
    #__displayCategories("", $careTerm, $careSubset, $question, $storedValues, false)
  #end
#end
{{/velocity}}

{{velocity filter="indent"}}
#if ($xcontext.action == 'get')
  #if ("$!{request.modules}" != '')##
    {{html clean="false" wiki="false"}}##
    #set($modulesObj = $jsontool.parseToJSONArray(${request.modules}))
    #set ($lastIdx = $modulesObj.length() - 1)
    #__displayModuleGroup("$!{request.question}", "$!{request.variantNumber}", "$!{request.groupTitle}", $modulesObj, ${lastIdx}, "$!{request.tab}", "$!{request.storageClass}", false, true)
    {{/html}}
  #end
#end
{{/velocity}}</content>
  <object>
    <name>PhenoTips.CarePathways</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>e35d82ae-f12e-4fae-a07b-5d3c5935ef5b</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function(PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
  // Care Pathways.
  var cp = widgets.carePathways = widgets.carePathways || {};
  cp.CPDetailsDialog = Class.create(widgets.DetailsDialog, {
    initialize : function($super, termID, dataName, parentContainer, qualifierCount, qualifierDataClass) {
      $super(termID, dataName, parentContainer, qualifierCount, qualifierDataClass);
      this.getDialog().__validate = this._validate.bind(this);
    },

    withHiddenDataElement : function(options) {
      var spanElem = new Element('span');
      var inputSourceClass = options ? options.inputSourceClass : "";
      var hiName = (this._qualifierDataClass &amp;&amp; options.qualifierName)
        ? this._qualifierDataClass + this._globalCount + "_" + options.qualifierName
        : this._dataName + '_' + this._elementID + '_' + options.qualifierName;
      var hiddenInput = new Element('input', {'type' : 'hidden', 'name' : hiName, 'class' : inputSourceClass});
      hiddenInput.value = (options.hiddenDataValue != null &amp;&amp; options.hiddenDataValue != undefined) ? options.hiddenDataValue : "";
      spanElem.insert(hiddenInput);
      spanElem._getValue = function() { return hiddenInput.value; };
      spanElem._setValue = function(value) { hiddenInput.value = value; };
      spanElem._addValue = function(values) { options.qualifierName &amp;&amp; (values[options.qualifierName] = hiddenInput.value); };
      return this.withSimpleDataElement(spanElem, options);
    },

    withTypeAhead : function (collapsible, options) {
      options = options || {};
      var inputSourceClass = options.inputSourceClass || "";
      var data = options.data || {};
      var spanElem = new Element('span', {'class': 'scrollable-typeahead'});
      var inputElem = new Element('input', {'class' : inputSourceClass + ' ' + 'typeahead', 'type' : 'text', 'placeholder' : options.placeholder || ''});

      spanElem.insert(inputElem);
      var _this = this;
      this._initTypeAhead(spanElem, inputElem, data, options);
      options.inline = 'inline';
      this._qualifierDataClass &amp;&amp; options.qualifierName
        &amp;&amp; this._setPhenoTipsTypeAheadInputFormData(spanElem, inputElem, options.displayedToStoredMapper, this._qualifierDataClass + this._globalCount
        + "_", options.qualifierName);
      return this.withQualifierElement(spanElem, collapsible, options);
    },

    withSimpleDataElement : function(element, options) {
      var defListItemClass = options.defListItemClass || "";
      var qualifierLabel = options.qualifierLabel || "";
      var qualifierName = options.qualifierName || "";
      var dtElem = new Element('dt');
      var ddElem = new Element('dd');
      dtElem.addClassName(defListItemClass);
      ddElem.addClassName(defListItemClass);
      qualifierLabel &amp;&amp; dtElem.insert('&lt;label&gt;' + qualifierLabel + '&lt;/label&gt;');
      ddElem.insert(element);
      this._qualifierList.insert(dtElem).insert(ddElem);
      qualifierName &amp;&amp; (this._qualifierMap[qualifierName] = element);
      element._toggleSummarize = function() {};
      return this;
    },

    blur : function($super) {
      this._isValid() &amp;&amp; $super();
    },

    _validate : function() {
      var valid = this._isValid();
      !valid &amp;&amp; this.focus();
      return valid;
    },

    _isValid : function(dialog) {
      var dialog = this.getDialog();
      var valid = true;
      if (dialog.__validated_Elems) {
        var valid = LiveValidation.massValidate(dialog.__validated_Elems.map(function(x) { return x.__validation; }));
      }
      return valid;
    },

    _attachOnDeleteListener : function ($super, deleteAction, ajaxDeleteAction) {
      var _this = this;
      var deleteElements = function() {
        _this._termDetails.select('.mandatory :input:not([type="hidden"])', '.mandatory-date input.fuzzy-date').each(function(validatedElem) {
          validatedElem.__validation.destroy();
        });
        _this._termDetails.remove();
        _this._qualifierMap = {};
        Event.fire(_this._container, _this._dataName + ':dialog:deleted', {'id' : _this._elementID});
      };
      deleteAction.observe('click', function () {
        if (ajaxDeleteAction) {
        var url =  ajaxDeleteAction.replace(/([&amp;?]classid=)(xXx__COUNT_TEMPLATE__xXx)([&amp;$])/, "$1" + _this._globalCount + "$3");
        _this._sendRemoveRequest(deleteAction, url, deleteElements);
        } else {
          deleteElements();
        }
      });
    },

    _initTypeAhead : function(spanElem, inputElem, data, options) {
      var _this = this;
      var userEntered = options.remote ? new Bloodhound({
          datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
          queryTokenizer: Bloodhound.tokenizers.whitespace,
          prefetch: options.remote + '',
          remote: {
            url: options.remote + '%QUERY',
            wildcard: '%QUERY'
          }
      }) : [];
      var typeaheadEl = jQuery(inputElem).typeahead(
        {
          minLength: options.minLength || 0,
          highlight: true,
          hint: true
        },
        {
          name: 'presets',
          source: _this._typeAheadMatcher(data),
          limit: options.limit || 20
        },
        {
          name: 'user-entered',
          source: userEntered,
          display: 'name',
          limit: options.limit || 20,
          templates: { header: '&lt;h3 class="user-entered-data"&gt;Custom options entered by other users&lt;/h3&gt;' }
        }
      );
      spanElem._getValue = _this._defaultGetInputValueFx(typeaheadEl);
      spanElem._setValue = _this._setInputValueFx(inputElem, options.storedToDisplayedMapper);
      spanElem._addValue = _this._addSimpleValueFx(spanElem, options.qualifierName, options.displayedToStoredMapper);
    },

    /**
     * A function for retrieving the input value from the element.
     *
     * @return {Function} a function for retrieving the input value
     * @private
     */
    _defaultGetInputValueFx : function (inputEl) {
      return function () {
        var inputVal = inputEl.typeahead('val');
        return inputVal ? inputVal : "";
      };
    },

    _typeAheadMatcher : function(data) {
      return function (query, sync) {
        if (query === '') {
          sync(data);
        } else {
          var matches, substrRegex;
          // an array that will be populated with substring matches
          matches = [];

          // regex used to determine if a string contains the substring `query`
          substrRegex = new RegExp(query, 'i');

          // iterate through the pool of strings and for any string that
          // contains the substring `query`, add it to the `matches` array
          data.each(function(item) {
            if (substrRegex.test(item)) {
              matches.push(item);
            }
          });
          sync(matches);
        }
      };
    },

    /**
     * A function for setting an input element value.
     *
     * @param inputEl the input element
     * @param valueMapperFx the custom value mapper function; null if value should be used as is
     * @return {Function} a function for setting the provided value in for the input
     * @private
     */
    _setInputValueFx : function (inputEl, valueMapperFx) {
      return function (value) {
        var mappedVal = valueMapperFx ? valueMapperFx(value) : value;
        jQuery(inputEl).typeahead('val', mappedVal);
        var parentEl = inputEl.up('span.scrollable-typeahead');
        var hiddenInput = parentEl &amp;&amp; parentEl.down('input[type="hidden"].stored-string-input-val');
        hiddenInput &amp;&amp; (hiddenInput.value = value);
      };
    },

    /**
     * A function for adding an input element value to the summary {Object}.
     *
     * @param element the parent element holding the input element
     * @param qualifierName the user-provided qualifier name
     * @param valueMapperFx the custom value mapper function; null if value should be used as is
     * @return {Function} a function for adding the input element value to the summary {Object}
     * @private
     */
    _addSimpleValueFx : function (element, qualifierName, valueMapperFx) {
      return function (values) {
        if (qualifierName) {
          values[qualifierName] = valueMapperFx ? valueMapperFx(element._getValue()) : element._getValue();
        }
      };
    },

    _setPhenoTipsTypeAheadInputFormData : function(spanElem, inputElem, toStored, qualifierClass, qualifierName) {
      var inputHiddenElem = new Element('input', {'class': 'stored-string-input-val', 'type': 'hidden'});
      spanElem.insert(inputHiddenElem);
      var formattedVal = function () { return toStored ? toStored(spanElem._getValue()) : spanElem._getValue(); };

      this._setInput(inputHiddenElem, formattedVal(), qualifierClass + qualifierName);
      var _this = this;
      var typeaheadEl = jQuery(inputElem);
      var menu = typeaheadEl.data('ttTypeahead').menu;

      inputElem.observe('blur', function(event) {
        // On blur, check if item is a selection (typeahead:selected event isn't triggered if user entered matching input and clicked away).
        var suggestionElems = inputElem.next("div.tt-menu").select("div.tt-suggestion");
        var enteredVal = typeaheadEl.typeahead('val');
        var matched = false;
        suggestionElems &amp;&amp; suggestionElems.each(function(elem) {
          var item = menu.getSelectableData(jQuery(elem));
          var suggestedVal = item.val;
          if (suggestedVal &amp;&amp; (suggestedVal.toLowerCase() === (enteredVal &amp;&amp; enteredVal.toLowerCase()))) {
            typeaheadEl.typeahead('val', suggestedVal);
            matched = true;
            throw $break;
          }
        });
        _this._setInput(inputHiddenElem, formattedVal(), null);
        Event.fire(_this._container, "cp:typeahead:" + (matched ? "selected" : "custom"), {'id' : _this._elementID, 'selected' : formattedVal(), 'dialog' : _this._termDetails});
      });
    }
  });

  return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>Modified DetailsDialog widget</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>  
  <object>
    <name>PhenoTips.CarePathways</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>6ae5459b-6ff6-4199-bb41-79eca9bb4eb9</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function(PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
  // Care Pathways.
  var cp = widgets.carePathways = widgets.carePathways || {};
  cp.CPDetailsDialogGroup = Class.create(widgets.DetailsDialogGroup, {
    _addDialog : function (count) {
      var qualifierCount = (count != null &amp;&amp; count != undefined) ? count : this._qualifierNo;
      var dialog = new PhenoTips.widgets.carePathways.CPDetailsDialog(this._termID, this._dataName, this._dialogHolder, qualifierCount, this._qualifierDataClass).attach();
      // Count the number of qualifiers for current term, regardless.
      this._qualifierNo++
      return dialog;
    },

    dialogsAddTypeAhead : function (collapsible, options) {
      var addTypeAhead = function (currentDialog) {
        currentDialog.withTypeAhead(collapsible, options);
      };
      this._dialogOptions.push(addTypeAhead);
      return this;
    },

    dialogsAddHiddenDataElement : function (options) {
      var addHiddenDataElement = function (currentDialog) {
        currentDialog.withHiddenDataElement(options);
      };
      this._dialogOptions.push(addHiddenDataElement);
      return this;
    },

    _clearDetails: function($super) {
      this._dialogHolder.select('.mandatory :input:not([type="hidden"])', '.mandatory-date input.fuzzy-date').each(function(validatedElem) {
        validatedElem.__validation.destroy();
      });
      $super();
    },

    _setQualifiers : function ($super, qualifiers, silent) {
      var _this = this;
      var elements = [];
      qualifiers.forEach(function (qualifier) {
        var dialog = _this.addDialog(silent, qualifier.count).setValues(qualifier);
        dialog.blur();
        elements.push(dialog.getDialog());
      });
      this._allowMultiDialogs &amp;&amp; this._addDetailsClickListener();
      elements.size() &amp;&amp; this.get().fire("detailsDialogGroup:dialogs:added", {"elements" : elements});
    }
  });

  // End PhenoTips augmentation.
  return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>Modified DetailsDialogGroup widget</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.CarePathways</name>
    <number>2</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>5651adc7-a499-42a1-b74c-1e45751b090d</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function(PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
  // Care Pathways.
  var cp = widgets.carePathways = widgets.carePathways || {};

  cp.ModuleNavigationPanel = Class.create({
    initialize : function(container, options) {
      if (!container) { return; }
      this._container = container;
      this._showPath = options.showPath;

      this._buildModule();
    },
    
    _buildModule : function() {
      var trElem = this._container.up('table.care-pathways-module-group-container').down('tr.care-pathways-section-label');
      var questionIdElement = trElem.down('input.cp-question-id');
      this._questionId = questionIdElement &amp;&amp; questionIdElement.value;

      this._navigationPanel = this._container.down('div.browse-categories-panel');

      this._collapseCategories();
      this._attachListeners();
    },

    _collapseCategories : function() {
      // Collapse any lists that do not have checked items.
      this._navigationPanel.select('span.expand-tool').each(function(item) {
        var listItemEl = item.up('li.term-entry');
        var innerList = listItemEl &amp;&amp; listItemEl.down('ul');
        if (innerList) {
          if (!innerList.down('input[type="checkbox"]:checked')) {
            innerList.hide();
          } else {
            item.removeClassName("fa-caret-right");
            item.addClassName("fa-caret-down");
            item.addClassName("expanded");
          }
        }
      });      
    },

    _attachListeners : function() {
      this._attachCheckedListeners();
      this._attachDeleteListeners();
    },

    _attachCheckedListeners : function() {
        var _this = this;
      this._navigationPanel.observe('click', function(event) {
        var labelEl = event.findElement('label');
        var actionEl = labelEl &amp;&amp; labelEl.down('span.expand-tool');
        // The only click event we care about is the one on the expand tool. Any others can be stopped.
        actionEl &amp;&amp; _this._toggleCollapsed(actionEl) || event.stopPropagation();
      });

      this._navigationPanel.observe('change', function(event) {
        var labelEl = event.findElement('label');
        var actionEl = labelEl &amp;&amp; labelEl.down('input.add-tool');
        event.stop();
        actionEl &amp;&amp; _this._toggleChecked(actionEl);
      });
    },

    _attachDeleteListeners : function() {
      var _this = this;
      this._container.observe('cp-selection:category:cleared', function(event) {
        var receivedMemo = event.memo;
        if (receivedMemo) {
          var module = receivedMemo.module;
          var questionId = receivedMemo.questionId;
          var deletedTerm = receivedMemo.id;
          var variantNum = receivedMemo.variantNum || null;
          var variantStub = variantNum ? '-' + variantNum : '';
          var checkbox = $('cp-add-tool-' + module + '-' + questionId + '-' + deletedTerm + variantStub);
          checkbox &amp;&amp; checkbox.checked &amp;&amp; (checkbox.checked = false);
        }
      });
    },

    _toggleCollapsed : function(elem) {
      var parentList = elem.up('li.term-entry');
      var collapseList = parentList &amp;&amp; parentList.down('ul');
      if (elem.hasClassName("expanded")) {
        elem.removeClassName("fa-caret-down");
        elem.addClassName("fa-caret-right");
        elem.removeClassName("expanded");
        collapseList &amp;&amp; collapseList.hide();
      } else {
        elem.removeClassName("fa-caret-right");
        elem.addClassName("fa-caret-down");
        elem.addClassName("expanded");
        collapseList &amp;&amp; collapseList.show();
      }
      return true;
    },

    _toggleChecked : function(elem) {
      var termNameEl = elem.next('span.term-name');
      var termName = termNameEl ? termNameEl.innerHTML : "";
      if (termName) {
        var parentLi = elem.up('li.term-entry');
        var submoduleEl = parentLi.down('input.submodule-name');
        var prefix = this._showPath ? this._getLabelPrefix(parentLi) : "";
        var memo = {"term_id" : elem.name, "term_name" : prefix + termName, "submodule" : submoduleEl ? submoduleEl.value : ""};
        if (parentLi.hasClassName('custom')) {
          var parentIdElem = parentLi.down('input.parent-id');
          var parentId = parentIdElem &amp;&amp; parentIdElem.value;
          parentId &amp;&amp; (memo["term_id"] = parentId + "_other");
          memo["notmapped"] = true;
        }
        var event = (elem.checked 
          &amp;&amp; Event.fire(this._container, "cp-navigation:category:checked", memo))
          || this._uncheckAfterSuccessfulDelete(elem, "cp-navigation:category:unchecked", memo);
      }
    },

    _getLabelPrefix : function(listElem) {
      var parentListElem = listElem.up('li.term-entry');
      if (parentListElem) {
        var nameElem = parentListElem.down('span.term-name');
        var name = nameElem &amp;&amp; nameElem.innerHTML || "";
        var prefix = this._getLabelPrefix(parentListElem);
        return prefix + name + " » ";
      } else {
        return "";
      }
    },

    _uncheckAfterSuccessfulDelete : function(elem, eventName, memo) {
      elem.checked = true;
      Event.fire(this._container, eventName, memo);
    }
  });

  // End PhenoTips augmentation.
  return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>Care Pathways module navigation panel widget</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.CarePathways</name>
    <number>3</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>ce0a1542-6ff2-481f-b0e6-6494513fbbbf</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function(PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
  // Care Pathways.
  var cp = widgets.carePathways = widgets.carePathways || {};

  cp.ModuleSelectionPanel = Class.create({
    initialize : function(container, options) {
      if (!container) { return; }
      this._container = container;

      this._getChildrenUrl = options.localUrl;
      this._addInputsFx = options.addInputsFx;
      this._addTextboxesFx = options.addTextboxesFx;
      this._termCount = 0;
      this._qualifierCount = 0;
      this._getCount = options.getCount || function() { return this._qualifierCount; };
      this._updateCount = options.updateCount || function(count) { this._qualifierCount = count; };
      this._deleteQualifierAction = options.deleteQualifier;
      this._clearCategoryAction = options.clearCategory;

      this._qualifierDataMarker = options.qualifierDataMarker;

      this._selectedSummary = options.currentSelectionPanel;
      this._moduleType = options.moduleType;

      this._selectedSummary &amp;&amp; this._buildModule();
    },

    _buildModule : function() {
      this._termsTable = this._selectedSummary.down('table.terms-data-table');

      var variantTypeElem = this._selectedSummary.down('input.associated-variant-type');
      this._variantType = variantTypeElem &amp;&amp; variantTypeElem.value;

      var variantNumber = this._selectedSummary.down('input.associated-variant-number');
      this._variantNumber = variantNumber &amp;&amp; variantNumber.value || null;

      var trQuestionElem = this._container.up('table.care-pathways-module-group-container').down('tr.care-pathways-section-label');
      var questionIdElement = trQuestionElem.down('input.cp-question-id');
      this._questionId = questionIdElement &amp;&amp; questionIdElement.value;

      var subjectElement = this._selectedSummary.down('input.cp-current-selection-subject');
      this._subject = subjectElement &amp;&amp; subjectElement.value;

      this._retrieveStoredData();
      this._attachListeners();
    },

    _retrieveStoredData : function() {
      var datesElem = this._selectedSummary.down('input.cp-current-selection-dates');
      if (datesElem) {
        var datesStr = datesElem.value;
        this._dates = datesStr &amp;&amp; JSON.parse(datesStr);
        datesElem.remove();
      }

      var storedDataElem = this._selectedSummary.down('input.cp-current-selection-stored-data');
      var storedData;
      if (storedDataElem) {
        storedData = storedDataElem.value;
        storedDataElem.remove();
      }
      var json = storedData &amp;&amp; JSON.parse(storedData);
      if (json) {
        var _this = this;
        var promises = [];
        $H(json).each(function(pair) {
          var data = pair.value;
          if (data.id &amp;&amp; data.label) {
            var matchingCheck = "cp-add-tool-" + _this._moduleType + "-" + _this._questionId + "-" + data.id + ((_this._variantNumber == 0 || _this._variantNumber) ? "-" + _this._variantNumber : "");
            var matchingCheckEl = $(matchingCheck);
            var submoduleEl = matchingCheckEl &amp;&amp; matchingCheckEl.next("input.submodule-name");
            var submodule = submoduleEl &amp;&amp; submoduleEl.value || "";
            var request = _this._buildNewTermElement.bind(_this, submodule, data.id, data.label, data)();
            promises.push(request);
          }
        });
        // Do one by one.
        jQuery.when.apply(null, promises).done(function() {
          Event.fire(document, "cp-selection:data:loaded");
          // Importing already saved data.
          Event.fire(document, "xwiki:document:saved");
        });
      }
    },

    _attachListeners : function() {
      var _this = this;
      this._container.observe("cp-navigation:category:checked", function(event) {
        var termId, termName;
        if (event.memo) {
          termId = event.memo.term_id;
          termName = event.memo.term_name || termId;
          submodule = event.memo.submodule;
          termId &amp;&amp; termName &amp;&amp; _this._buildNewTermElement.bind(_this, submodule, termId, termName || termId, undefined)();
        }
      });

      this._container.observe("cp-navigation:category:unchecked", function(event) {
        var termId, termName;
        if (event.memo) {
          termId = event.memo.term_id;
          var deleteAction = termId &amp;&amp; $('delete_term_' + termId) || null;
          deleteAction &amp;&amp; deleteAction.click();
        }
      });
    },

    _observeQualifierEvents : function(qualifiers) {
      var parent = qualifiers.up('tr.' + this._moduleType + '_field') || qualifiers.up('tr.' + this._moduleType + '_field');
      var _this = this;
      qualifiers.observe('parent:term:deleted', function(event) {
        var memo = {"id" : event.memo.id, "module" : _this._moduleType, "variantNum" : _this._variantNumber, "questionId" : _this._questionId};
        Event.fire(_this._container, 'cp-selection:category:cleared', memo);
        parent &amp;&amp; parent.remove();
      })
    },

    _buildNewTermElement : function(submodule, termId, termName, values) {
      var termDeleteStr = this._clearCategoryAction
        .replace(/([&amp;?]category=)(xXx__CATEGORY_TEMPLATE__xXx)([&amp;$])/, "$1" + termId + "$3")
        .replace(/([&amp;?]question=)(xXx__QUESTION_TEMPLATE__xXx)([&amp;$])/, "$1" + this._questionId + "$3");
      var options = {'allowMultiDialogs': true, 'disableTermDelete': false, 'termDeleteAction' : termDeleteStr};
      return this._doDoneDataResponse(this._constructDataRequest(termId), submodule, termId, termName, options, values);
    },

    _constructDataRequest : function(termId) {
      var url = this._getChildrenUrl + "input=" + encodeURIComponent(termId);
      var parameters = {};
      parameters.customFilter = "is_a:" + termId.replace(/:/g, "\\:");
      var _this = this;

      return jQuery.ajax(url, {
        method: "GET",
        data: parameters
      });
    },

    _doDoneDataResponse : function(req, submodule, termId, termName, options, values) {
      return req
        .done(this._buildNewTermElementFromResponse.bind(this, submodule, termId, termName, options, values))
        .fail(function(jqXHR, textStatus, errorThrown) {
        // TODO: Construct dialog with no typeahead options on failure??
        });
    },

    _buildNewTermElementFromResponse : function(submodule, termId, termName, options, values, response) {
      var json = response &amp;&amp; response.rows;
      if (json) {
        var tableCol = new Element('td');
        var tableRow = new Element('tr', {'class': this._moduleType + '_field category-data'} )
        var qualifiersWidget = this._buildDetailsDialog(submodule, termId, termName, options, json);
        var qualifiers = qualifiersWidget.get();
        // Set values silently, or initialize as affected, non-silently. If values are provided, then we're displaying
        // stored tests. If no values are provided, then we're adding a new test/care item with a qualifier dialog.
        qualifiers._widget = qualifiersWidget;
        tableRow.insert(tableCol.insert(qualifiers));
        this._observeQualifierEvents(qualifiers);
        this._termsTable.insert(tableRow);
        if (values) {
          qualifiersWidget.setValues(values);
        } else {
          qualifiersWidget.initAffected(false);
        }
      }
    },

    _buildDetailsDialog : function(submodule, termId, termName, options, json) {
      var qualifiersWidget = new PhenoTips.widgets.carePathways.CPDetailsDialogGroup("parent", options)
        .withGlobalQualifierCount(this._getCount, this._updateCount)
        .withQualifierDataMarker(this._qualifierDataMarker + "_")
        .withLabel(termName, termId, null, true)
        .dialogsAddDeleteAction(this._deleteQualifierAction);
      this._addInputsFx &amp;&amp; this._addInputsFx(qualifiersWidget, json, termId, this._moduleType, submodule, this._qualifierDataMarker);
      this._pickSubjectElement(qualifiersWidget);
      this._addDateElements(qualifiersWidget);
      this._addTextboxesFx &amp;&amp; this._addTextboxesFx(qualifiersWidget, this._questionId, parseInt(this._variantNumber), termId, this._moduleType, submodule);
      return this._addHiddenDataElements(qualifiersWidget);
    },

    _pickSubjectElement : function(qualifiersWidget) {
      if (this._moduleType === 'family') {
        qualifiersWidget.dialogsAddItemSelect({
          'data': ['', 'mother', 'father', 'sister', 'brother', 'aunt', 'uncle'],
          'defListItemClass': 'subject mandatory',
          'inputSourceClass': this._moduleType + '_subject',
          'qualifierLabel': "$escapetool.javascript($services.localization.render('phenotips.carePathways.detailsDialog.subject.title'))",
          'qualifierName': 'subject'
        });
      } else {
        qualifiersWidget.dialogsAddHiddenDataElement({
          'defListItemClass': 'subject hidden',
          'inputSourceClass': this._moduleType + '_subject',
          'qualifierName': 'subject',
          'hiddenDataValue': this._subject
        });
      }
      return qualifiersWidget;
    },

    _addDateElements : function(qualifiersWidget) {
      // All Care Pathways dates are mandatory.
      this._dates &amp;&amp; this._dates.each(function(date) {
        var name = date.name;
        var label = date.label;
        name &amp;&amp; qualifiersWidget.dialogsAddDatePicker(false, {
          'trackLastEnteredDate' : true,
          'defListItemClass': name + ' date-element mandatory-date',
          'qualifierLabel': label,
          'qualifierName': name + '_fuzzy',
          'approxQualifierName' : name});
      });
    },

    _addHiddenDataElements : function(qualifiersWidget) {
      this._variantType &amp;&amp; qualifiersWidget.dialogsAddHiddenDataElement({
        'defListItemClass': 'type hidden',
        'inputSourceClass': this._moduleType + '_type',
        'qualifierName': 'type',
        'hiddenDataValue': this._variantType
      });

      this._variantNumber &amp;&amp; qualifiersWidget.dialogsAddHiddenDataElement({
        'defListItemClass': 'variant hidden',
        'inputSourceClass': this._moduleType + '_variant',
        'qualifierName': 'variant',
        'hiddenDataValue': parseInt(this._variantNumber)
      });

      qualifiersWidget.dialogsAddHiddenDataElement({
          'defListItemClass': 'question hidden',
          'inputSourceClass': this._moduleType + '_question',
          'qualifierName': 'question',
          'hiddenDataValue': this._questionId})
        .dialogsAddHiddenDataElement({
          'defListItemClass': 'date_entered hidden',
          'inputSourceClass': this._moduleType + '_date_entered',
          'qualifierName': 'date_entered',
          'hiddenDataValue': ''})
        .dialogsAddHiddenDataElement({
          'defListItemClass': 'date_amended hidden',
          'inputSourceClass': this._moduleType + '_date_amended',
          'qualifierName': 'date_amended',
          'hiddenDataValue': ''})
        .dialogsAddHiddenDataElement({
          'defListItemClass': 'module hidden',
          'inputSourceClass': this._moduleType + '_module',
          'qualifierName': 'module',
          'hiddenDataValue': this._moduleType});

        var widgetElem = qualifiersWidget.get();
        widgetElem.observe("parent:dialog:added", this._onDialogAddedListener.bind(this));
        widgetElem.observe("detailsDialogGroup:dialogs:added", this._onDialogAddedListener.bind(this));

        return qualifiersWidget;
    },

    _onDialogAddedListener : function(event) {
      if (!event.memo) { return; }
      var _this = this;
      var elements = [];
      if (event.memo.elements) {
        elements = event.memo.elements;
        elements.each(_this._attachDialogChangedListener.bind(_this));
      } else if (event.memo.element) {
        elements.push(event.memo.element);
        this._attachDialogChangedListener(event.memo.element);
      }
      elements.size() &amp;&amp; Event.fire(document, "xwiki:dom:updated", {"elements" : elements});
    },

    _attachDialogChangedListener : function(dialog) {
      var dateAmendedInput = dialog.down('input.' + this._moduleType + '_date_amended');
      dateAmendedInput &amp;&amp; dialog.observe('change', function(event) {
        dateAmendedInput.value = "";
      });
    },

    _getToStoredTypeAheadFx : function(json) {
      var mapped = new Map(json.map(function(x) { return [x.name, x.id]; }));
      return function(item) {
        return mapped.get(item) || item;
      };
    },

    _getToDisplayedTypeAheadFx : function(json) {
      var mapped = new Map(json.map(function(x) { return [x.id, x.name]; }));
      return function(item) {
        return mapped.get(item) || item;
      };
    }
  });

  // End PhenoTips augmentation.
  return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>Care Pathways current module selection widget</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.CarePathways</name>
    <number>4</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>0afd552f-ff87-4908-a916-6ecb387e20a6</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>// Initialization of multi-picker, selection, and navigation panels.
// This also contains some custom Care Pathways code.
var qualifierCount = 0;
var getCount = function() {
  return qualifierCount;
};

var incrementCount = function() {
  qualifierCount++;
};

var updateCount = function(count) {
  qualifierCount = count;
};

var getToStoredTypeAheadFx = function(json) {
  var mapped = new Map(json.map(function(x) { return [x.name, x.id]; }));
  return function(item) {
    return mapped.get(item) || item;
  };
};

var getToDisplayedTypeAheadFx = function(json) {
  var mapped = new Map(json.map(function(x) { return [x.id, x.name]; }));
  return function(item) {
    return mapped.get(item) || item;
  };
};

var addInputFormElements = function(qualifiersWidget, json, termId, moduleType, submoduleType, dataStorage) {
  // TODO: This will be different for a gene panel/single gene.
  var detailsRemoteUrl = new XWiki.Document('CarePathwaysDataSearch', 'PhenoTips').getURL('get', 'dataclass=' + dataStorage);
  var labRemoteUrl = new XWiki.Document('CarePathwaysLaboratorySearch', 'PhenoTips').getURL('get', 'dataclass=' + dataStorage);

  qualifiersWidget.dialogsAddTypeAhead(false, {
    'remote' : detailsRemoteUrl + "&amp;parent=" + termId + "&amp;input=",
    'data': json.map(function(x) { return x.name; }),
    'placeholder': 'Begin typing or click to show options',
    'defListItemClass': moduleType + ' datum' + ((json.size() || termId.endsWith('_other') || termId === 'CP:1110' || termId === 'CP:1111') ? ' mandatory' : ''),
    'inputSourceClass': moduleType + '_typeahead',
    'qualifierLabel': "$escapetool.javascript($services.localization.render('phenotips.carePathways.detailsDialog.datum.title'))",
    'qualifierName': 'datum',
    'displayedToStoredMapper': getToStoredTypeAheadFx(json),
    'storedToDisplayedMapper': getToDisplayedTypeAheadFx(json)});

  submoduleType == "genetic" &amp;&amp; qualifiersWidget.dialogsAddTypeAhead(false, {
    'remote' : labRemoteUrl + "&amp;input=",
    'data': [],
    'placeholder': 'Begin typing or click to show options',
    'defListItemClass': moduleType + ' laboratory mandatory',
    'inputSourceClass': moduleType + '_typeahead',
    'qualifierLabel': "$escapetool.javascript($services.localization.render('phenotips.carePathways.detailsDialog.laboratory.title'))",
    'qualifierName': 'laboratory'});
};

var addTextboxFormElements = function(qualifiersWidget, questionId, variantNum, termId, moduleType, submoduleType) {
  // The text box should only be added for imaging tests or care items, or other items.
  var hasNotes = termId.endsWith('_other') || isAnImagingElement(questionId, variantNum, termId, moduleType);
  hasNotes &amp;&amp; qualifiersWidget.dialogsAddTextBox(false, {
    'defListItemClass': 'comments',
    'inputSourceClass': moduleType + '_notes',
    'qualifierLabel': "$escapetool.javascript($services.localization.render('phenotips.carePathways.detailsDialog.notes.title'))",
    'qualifierName': 'notes'});
};

var isAnImagingElement = function(questionId, variantNum, termId, moduleType) {
  var imagingSpan = $("cp-expand-tool-" + moduleType + "-" + questionId + "-" + "CP:23" + ((variantNum == 0 || variantNum) ? "-" + variantNum : ""))
      || $("cp-expand-tool-" + moduleType + "-" + questionId + "-" + "CP:1267" + ((variantNum == 0 || variantNum) ? "-" + variantNum : ""));
  var termEntryElem = imagingSpan &amp;&amp; imagingSpan.up('.term-entry');
  return termEntryElem &amp;&amp; termEntryElem.down('input.term-id[value="' + termId + '"]');
};

// Cannot use typeahead.bundle.min.js, need to define typeahead and bloodhound separately.
require.config({
  paths: {
    'typeahead': "$services.webjars.url('org.webjars.npm:corejs-typeahead', 'dist/typeahead.jquery.min.js')",
    'bloodhound': "$services.webjars.url('org.webjars.npm:corejs-typeahead', 'dist/bloodhound.min.js')"
  },
  shim: {
    'typeahead': {
      deps: ['jquery']
    },
    'bloodhound': {
      deps: ['jquery'],
      exports: 'Bloodhound'
    }
  }
});

var initNavAndSelMods = function(modules) {
    modules &amp;&amp; modules.length &gt; 0 &amp;&amp; modules.each(function(module) {
      var localUrl = XWiki.contextPath + "/rest/vocabularies/care-pathways/suggest?sort=nameSort%20asc&amp;maxResults=10000&amp;";
      var dataStorageEl = $("data-storage-class");
      var dataStorage = dataStorageEl &amp;&amp; dataStorageEl.value;
      var clearCategoryEl = $('clear-category-action');
      var deleteQualifierEl = $('delete-qualifier-action');
      var options = {"localUrl" : localUrl, "addInputsFx" : addInputFormElements, "addTextboxesFx" : addTextboxFormElements, "getCount" : getCount, "incrementCount" : incrementCount, "updateCount" : updateCount, "clearCategory" : clearCategoryEl.value, "deleteQualifier" : deleteQualifierEl.value, "qualifierDataMarker" : dataStorage, "showPath" : true};
      options.currentSelectionPanel = module.down('div.current-selection-panel');
      var moduleTypeElem = options.currentSelectionPanel &amp;&amp; options.currentSelectionPanel.down('input[name=moduleType]');
      options.moduleType = moduleTypeElem &amp;&amp; moduleTypeElem.value;
      new PhenoTips.widgets.carePathways.ModuleSelectionPanel(module, options);
      new PhenoTips.widgets.carePathways.ModuleNavigationPanel(module, options);
    });
    return true;
};

var initFamilyMods = function(modules) {
  modules &amp;&amp; modules.length &gt; 0 &amp;&amp; modules.each(function(module) {
    var dataStorageEl = $("data-storage-class");
    var dataStorage = dataStorageEl &amp;&amp; dataStorageEl.value;
    var deleteQualifierEl = $('delete-qualifier-action');

    var tableEl = module.up('table.posttest-section.care-pathways-module-group-container');
    var questionEl = tableEl &amp;&amp; tableEl.down('input.cp-question-id');

    var moduleGroupEl = module.up('.care-pathways-modules-wrapper');
    var variantEl = moduleGroupEl &amp;&amp; moduleGroupEl.down('input.variant-number');

    var datumEl = module.down('input.test-id');

    var typeEl = module.down('input.associated-variant-type');

    var storedDataEl = module.down('input.cp-current-selection-stored-data');
    var dataElements = {"question" : questionEl &amp;&amp; questionEl.value, "variant" : variantEl &amp;&amp; variantEl.value, "datum" : datumEl &amp;&amp; datumEl.value, "type" : typeEl &amp;&amp; typeEl.value, "date_entered" : "", "date_amended" : ""};
    var options = {"getCount" : getCount, "incrementCount" : incrementCount, "updateCount" : updateCount, "deleteQualifier" : deleteQualifierEl.value, "qualifierDataMarker" : dataStorage, "dataName" : "subject", "dataElements" : dataElements, "storedDataEl" : storedDataEl};
    new PhenoTips.widgets.carePathways.MultiPicker(module, options);
  });
  return true;
};

var init = function(event) {
  require(["jquery", "bloodhound", "typeahead"], function(jquery, Bloodhound, typeahead) {
    if (event.memo &amp;&amp; event.memo.element) {
      var elem = event.memo.element;
      var standardModules = elem.select(".care-pathways-module-container");
      initNavAndSelMods(standardModules);
      var familyModules = elem.select(".care-pathways-family-module-container");
      initFamilyMods(familyModules);
    } else {
      initNavAndSelMods($$(".care-pathways-module-container"));
      initFamilyMods($$(".care-pathways-family-module-container"));
    }
    return true;
  });
};

(XWiki.domIsLoaded &amp;&amp; init()) || document.observe("xwiki:dom:loaded", function(event) {
  init(event);
  document.observe('cp:navmodules:added', init);
});</code>
    </property>
    <property>
      <name>Selection and navigation module initializer</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.CarePathways</name>
    <number>5</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>34b8353b-483f-47a0-b61b-cb6935b684a2</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function(PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
  // Care Pathways.
  var cp = widgets.carePathways = widgets.carePathways || {};

  cp.VariantAnalysisModule = Class.create({
    initialize : function(container, options) {
      this._container = container;

      this._sheet = "PhenoTips.CarePathwaysPostTestSheet";
      this._dataStorage = "PhenoTips.PatientCarePostTestClass";
      this._section = options.section || "";
      this._questionsClearUrl = options.questionsClearUrl;
      this._questionDeleteUrl = options.questionDeleteUrl;
      this._buildModulesUrl = options.buildModulesUrl;

      this._primaryQuestionnaireContainer = $(this._section + '-questionnaire-primary');
      this._secondaryQuestionnaireContainer = $(this._section + '-questionnaire-secondary');

      this._buildModule();
      this._attachGeneOrVariantAddedListener();
    },

    _buildModule : function() {
      this._buildPrimaryVariantsDataAnalysis();
      this._buildPrimaryVariantsInterpretation();
      this._buildSecondaryVariantsDataAnalysis();
    },

    _buildPrimaryVariantsDataAnalysis : function() {
      var clearPrimaryDataObj = $('clear-primary-data');
      this._clearPrimaryDataUrl = clearPrimaryDataObj &amp;&amp; clearPrimaryDataObj.value || "";

      this._primaryVariantsList = $('primary-wes-variants-proband');
      // No primary variants checkbox.
      this._noPrimaryVariants = $(this._sheet + '_0_noPrimaryVariants');
      this._noPrimaryVariants &amp;&amp; this._noPrimaryVariants.checked &amp;&amp; this._primaryVariantsList.addClassName('hidden');
      this._attachNoPrimaryVariantsClickListener();
    },

    _buildPrimaryVariantsInterpretation : function() {
      this._primaryVariantsInterpretation = $('primary-variants-interpretation-container');
      // Store the checked interpretation in case the selection is not confirmed.
      this._currentInterpretationEl = this._primaryVariantsInterpretation.down('input[checked="checked"]');
      this._attachPrimaryInterpretationClickListener();
    },

    _attachPrimaryInterpretationClickListener : function() {
      this._primaryVariantsInterpretation.observe('click', function(event) {
        event.stopPropagation();
      });

      var _this = this;
      this._primaryVariantsInterpretation.observe('change', function(event) {
        event.stop();
        var targetElement = event.findElement('input');
        if (targetElement) {
          var targetElementVal = targetElement.value;
          var moduleSpecsEl = $(targetElementVal + '-module-specs');
          var moduleSpecs = moduleSpecsEl &amp;&amp; moduleSpecsEl.value;
          if (moduleSpecs) {
            _this._generateQuestionsForPrimaryVariants.bind(_this, targetElement, moduleSpecs)();
          }
        }
      });
    },

    _generateQuestionsForPrimaryVariants : function(targetElement, moduleSpecs) {
      if (!this._currentInterpretationEl || this._currentInterpretationEl == targetElement || !this._userRecordedData(this._primaryQuestionnaireContainer)) {
        this._currentInterpretationEl = targetElement;
        this._ajaxRequestNewQuestions(this._primaryQuestionnaireContainer, moduleSpecs, null, 'modules-for-primary-variants');
      } else {
        if (confirm("$!escapetool.javascript($services.localization.render('phenotips.carePathways.postTest.cpmodulesDeleteConfirmation'))")) {
          var req = this._clearQuestionData(this._questionsClearUrl, this._currentlyDisplayedPrimaryQuestions(), this._primaryQuestionnaireContainer);
          var _this = this;
          // Proceed only after stored question data has been deleted.
          jQuery.when(req).then(function(r1) {
            _this._currentInterpretationEl = targetElement;
            _this._ajaxRequestNewQuestions.bind(_this, _this._primaryQuestionnaireContainer, moduleSpecs, null, 'modules-for-primary-variants')();
          });
        } else {
          targetElement.checked = "";
          this._currentInterpretationEl.checked = "checked";
        }
      }
    },

    _clearQuestionData : function(url, questions, questionnaireContainer) {
      var questionData = '&amp;question=' + questions.join('&amp;question=');
      return jQuery.ajax(url + questionData, {
        method : "GET",
      }).success(function(data, textStatus, jqXHR) {
        questionnaireContainer.innerHTML = '';
      });
    },

    _currentlyDisplayedPrimaryQuestions : function() {
      var currentVal = this._currentInterpretationEl.value;
      var oldSpecsEl = $(currentVal + '-module-specs');
      var oldSpecs = oldSpecsEl &amp;&amp; oldSpecsEl.value;
      return JSON.parse(oldSpecs).map(function(questionData) {
        return questionData.question;
      });
    },

    _userRecordedData : function(questionnaireContainer) {
      var hasData;
      questionnaireContainer.select('div.cp-current-selection-panel table.terms-data-table').each(function(dataTable) {
        if (dataTable.innerHTML.trim() !== '') {
          hasData = true;
          throw $break;
        }
      });
      !hasData &amp;&amp; (questionnaireContainer.innerHTML = '');
      return hasData;
    },

    _ajaxRequestDataModules : function(questionContainer, question, cDnaEl, variantIndex, modules, containerCssClass) {
      var _this = this;
      var cDnaInput;
      var params = {'question' : question, 'modules' : JSON.stringify(modules), 'tab' : encodeURIComponent(_this._sheet), 'storageClass' : encodeURIComponent(_this._dataStorage)};
      if (cDnaEl) {
        cDnaInput = cDnaEl.down('input[type="text"]');
        params['groupTitle'] = this._getModuleGroupTitle(cDnaEl, cDnaInput);
      }
      variantIndex &amp;&amp; (params['variantNumber'] = variantIndex);
      var req = jQuery.ajax(this._buildModulesUrl, {
        method : "GET",
        data : params
      });
      var container = new Element("table", {"class" : "care-pathways-modules-wrapper table " + containerCssClass});
      return req.success(function(data, textStatus, jqXHR) {
        questionContainer.insert(container.insert(data));
        var titleEl = container.down('h2.module-group-label p');
        cDnaInput &amp;&amp; titleEl &amp;&amp; _this._updateModuleGroupTitleOnDoneTyping.bind(_this, titleEl, cDnaEl, cDnaInput)();
        Event.fire(document, 'cp:navmodules:added', {'element' : container});
      });
    },

    _updateModuleGroupTitleOnDoneTyping : function(titleEl, cDnaEl, cDnaInput) {
      var typingTimer;
      var doneTypingInterval = 500;
      var _this = this;
      var doneTyping = function() {
        titleEl.innerHTML = _this._getModuleGroupTitle(cDnaEl, cDnaInput);
      };
      cDnaInput.observe('keyup', function() {
        clearTimeout(typingTimer);
        typingTimer = setTimeout(doneTyping, doneTypingInterval);
      });
      cDnaInput.observe('keydown', function() {
        clearTimeout(typingTimer);
      });
    },

    _getModuleGroupTitle : function(cDnaEl, cDnaInput) {
      var cdna = cDnaInput.value || "";
      var gene = this._getGeneForVariant(cDnaEl);
      return gene + " [" + cdna.escapeHTML() + "]";
    },

    _ajaxRequestNewQuestions : function(questionnaireContainer, moduleSpecs, variantIndex, containerCssClass) {
      var specsJson = JSON.parse(moduleSpecs);
      var _this = this;
      var promises = [];
      specsJson.each(function(questionSpecs) {
        var request = _this._ajaxRequestNewQuestion.bind(_this, questionnaireContainer, questionSpecs, null, variantIndex, containerCssClass)();
        promises.push(request);
      });
      var GENERATING = 'generating';
      var spinner = this._getSpinner('care-pathways-loading', "$!escapetool.javascript($services.localization.render('phenotips.carePathways.generatingData'))");
      questionnaireContainer.addClassName(GENERATING);
      questionnaireContainer.insert(spinner);
      jQuery.when.apply(null, promises).then(function() {
        spinner.remove();
        questionnaireContainer.removeClassName(GENERATING);
      });
    },

    _getSpinner : function(cssClass, message) {
      var spinner = new Element('span', {'class' : 'fa fa-lg fa-spinner fa-spin fa-fw'});
      var spinnerContainer = new Element('span', {'class' : cssClass}).insert(spinner);
      message &amp;&amp; spinnerContainer.insert(new Element('span', {'class' : 'spinner-message-container'}).insert(message));
      return spinnerContainer;
    },

    _ajaxRequestNewQuestion : function(questionnaireContainer, questionSpecs, cDnaEl, variantIndex, containerCssClass) {
      var questionContainer = this._buildQuestionContainer(questionnaireContainer, questionSpecs.question, questionSpecs.questionLabel);
      return this._ajaxRequestDataModules(questionContainer, questionSpecs.question, cDnaEl, variantIndex, questionSpecs.modules, containerCssClass);
    },

    _buildQuestionContainer : function(questionnaireContainer, questionId, questionLabel) {
      var tableId = 'modules-for-' + questionId;
      var modulesContainer = new Element('td');
      var questionTable = new Element("table", {"id" : tableId, "class" : this._section + "-section table care-pathways-module-group-container"});
      questionTable.insert(new Element("tr", {"class" : "table-row care-pathways-section-label"})
        .insert(new Element("td", {"colspan" : "2", "class" : "table-cell"})
          .insert(new Element("input", {"type" : "hidden", "class" : "cp-question-id", "value" : questionId}))
          .insert(questionLabel || questionId)))
      .insert(new Element("tr", {"class" : "care-pathways-modules"})
        .insert(modulesContainer));
      questionnaireContainer.insert(questionTable);
      return modulesContainer;
    },

    _buildSecondaryVariantsDataAnalysis : function() {
      var clearSecondaryDataObj = $('clear-secondary-data');
      this._clearSecondaryDataUrl = clearSecondaryDataObj &amp;&amp; clearSecondaryDataObj.value || "";
      this._secondaryVariantsList = $('secondary-wes-variants-all');
      // No secondary variants checkbox.
      this._noSecondaryVariants = $(this._sheet + '_0_noSecondaryVariants');;
      this._noSecondaryVariants.checked &amp;&amp; this._secondaryVariantsList.addClassName('hidden');
      this._attachNoSecondaryVariantsClickListener();
    },

    _attachGeneOrVariantAddedListener : function() {
      var _this = this;
      document.observe("xwiki:dom:updated", function(event) {
        var elem = event.memo &amp;&amp; event.memo.elements &amp;&amp; event.memo.elements[0];
        var statusCol = elem &amp;&amp; elem.down('td.Status.gene');
        if (statusCol) {
          // This is a gene.
          var savedStatus = statusCol.down('input.gene-status-value');
          var defaultStatus = statusCol.down('input.default-gene-status-value');
          // The extraGeneVariantData sets the value to "candidate" by default. That's not what we want.
          savedStatus &amp;&amp; defaultStatus &amp;&amp; (savedStatus.value = defaultStatus.value);
        } else {
          // This is a variant.
          var parentContainer = elem.up('div.subject-variants-container');
          var parentContainerId = parentContainer &amp;&amp; parentContainer.id;
          var type = parentContainerId &amp;&amp; parentContainerId.substring(0, parentContainerId.indexOf('-wes-variants'));
          if (type === 'secondary') {
            // This is a secondary variant.
            _this._generateQuestionForSecondaryVariant(elem, parentContainerId.substring(parentContainerId.lastIndexOf('-') + 1));
          }
        }
      });
    },

    _generateQuestionForSecondaryVariant : function(addedElem, subject) {
      var variantCdnaEl = addedElem.down('td.variant.cdna');
      if (variantCdnaEl) {
        var variantCdnaClass = variantCdnaEl.className;
        var variantIndex = variantCdnaClass.substring(variantCdnaClass.lastIndexOf('-') + 1);
        var moduleSpecsEl = $(subject + '-secondary-module-specs');
        var moduleSpecs = moduleSpecsEl &amp;&amp; moduleSpecsEl.value;
        var _this = this;
        var promises = [];
        var containerCssClass = 'modules-for-secondary-variants with-variant-' + variantIndex;
        moduleSpecs &amp;&amp; JSON.parse(moduleSpecs).each(function(questionSpecs) {
          var questionId = questionSpecs.question;
          var questionTable = $('modules-for-' + questionId);
          if (questionTable) {
            var questionContainer = questionTable.down('tr.care-pathways-modules td');
            questionContainer &amp;&amp; _this._ajaxRequestDataModules(questionContainer, questionSpecs.question, variantCdnaEl, variantIndex, questionSpecs.modules, containerCssClass);
          } else {
            var request = _this._ajaxRequestNewQuestion.bind(_this, _this._secondaryQuestionnaireContainer, questionSpecs, variantCdnaEl, variantIndex, containerCssClass)();
            promises.push(request);
          }
        });
        jQuery.when.apply(null, promises);
      }
    },

    _getGeneForVariant : function(cDnaEl) {
      var containingRow = cDnaEl.up('tr');
      var rowClass = containingRow.className;
      var geneIndex = rowClass.substring(rowClass.lastIndexOf('-') + 1);
      var geneTable = containingRow.up('table.gene-table');
      var symbolEl = geneTable.down('p.gene.gene-input-label.gene-' + geneIndex);
      return symbolEl &amp;&amp; symbolEl.innerHTML || "";
    },

    _attachNoPrimaryVariantsClickListener : function() {
      var _this = this;
      this._noPrimaryVariants.observe('click', function(event) {
        event.stopPropagation();
      });

      this._noPrimaryVariants.observe('change', function(event) {
        event.stop();
        if (this.checked) {
          var genesTable = _this._primaryVariantsList.down('table.gene-table.cp-variants.extradata-list');
          genesTable &amp;&amp; (genesTable.__inputs = genesTable.select('input.gene-id'));
          if (!genesTable || !genesTable.__inputs || genesTable.__inputs.size() == 0) {
            // There is no variant data.
            _this._primaryVariantsList.addClassName('hidden');
          } else {
            // There is variant data. Do a confirmed ajax request and uncheck only on success.
            this.checked = false
            _this._ajaxClearGenes.bind(_this, _this._clearPrimaryDataUrl, this, [genesTable], _this._primaryVariantsList, null)();
          }
        } else {
          _this._primaryVariantsList.removeClassName('hidden');
        }
      });
    },

    _ajaxClearGenes : function(url, checkbox, genesTables, variantsContainer, clearRelatedDataFx) {
      var _this = this;
      if (checkbox.disabled) { return; }
      if (confirm("$!escapetool.javascript($services.localization.render('phenotips.carePathways.postTest.cpNoVariantsConfirmation'))")) {
        var req = jQuery.ajax(url, {
          method: "GET",
          beforeSend: function () { checkbox.disabled = true; }
        })
        .always(function () { checkbox.disabled = false; })
        .done(function (data, textStatus, jqXHR) {
          checkbox.checked = true;
          genesTables.each(function(genesTable) {
            _this._clearDisplayedGeneData.bind(_this, genesTable, genesTable.__inputs)();
          });
          variantsContainer.addClassName('hidden');
          clearRelatedDataFx &amp;&amp; clearRelatedDataFx();
        });
      }
    },

    _clearDisplayedGeneData : function(genesTable, geneIdInputs) {
      geneIdInputs.each(function(geneIdInput) {
        var geneId = geneIdInput.value;
        var className = geneIdInput.up('td').className;
        var geneIndex = parseInt(className.substring(className.lastIndexOf('-') + 1), 10);
        var dataRow = geneIdInput.up('tr');
        geneIdInput.remove();
        var geneNameInput = dataRow.down('input.gene-name');
        geneNameInput.__validation.destroy();
        $$('.variant-gene-' + geneIndex).each(function(item) {
          item.select('td.mandatory :input:not([type="hidden"])', '.mandatory-date input.fuzzy-date').each(function(validatedElem) {
            validatedElem.__validation &amp;&amp; validatedElem.__validation.destroy();
          });
          item.remove();
        });
        dataRow.remove()

        var i = 1;
        genesTable.select('td.row-count').each(function(item) {
          var geneRowIndex = item.next().className.substring(item.next().className.lastIndexOf('-') + 1);
          var y = 1;
          $$('.variant-hide-heading-' + geneRowIndex + ' .variant-row-count').each(function(vitem) {
            vitem.childNodes[1].textContent = i + '.' + (y++);
          });
          item.update(i++);
        });
      });
    },

    _attachNoSecondaryVariantsClickListener : function() {
      var _this = this;
      this._noSecondaryVariants.observe('click', function(event) {
        event.stopPropagation();
      });

      this._noSecondaryVariants.observe('change', function(event) {
        event.stop();
        if (this.checked) {
          var genesTables = _this._secondaryVariantsList.select('table.gene-table.cp-variants.extradata-list');
          var tables = [];
          genesTables.each(function(genesTable) {
            var inputs = genesTable.select('input.gene-id');
            if (inputs &amp;&amp; inputs.size() &gt; 0) {
              genesTable.__inputs = inputs;
              tables.push(genesTable);
            }
          });
          if (tables.size() == 0) {
            // There is no variant data.
            _this._secondaryVariantsList.addClassName('hidden');
          } else {
            // There is variant data. Do a confirmed ajax request and check only on success.
            this.checked = false
            _this._ajaxClearGenes.bind(_this, _this._clearSecondaryDataUrl, this, tables, _this._secondaryVariantsList, function() { _this._secondaryQuestionnaireContainer.innerHTML = '' })();
          }
        } else {
          _this._secondaryVariantsList.removeClassName('hidden');
        }
      });
    }
  });

  var init = function() {
    var analysisModules = $$('.care-pathways-analysis-module');
    analysisModules &amp;&amp; analysisModules.each(function(module) {
      var options = {};
      var moduleId = module.id;
      var section = moduleId &amp;&amp; moduleId.substring(0, moduleId.lastIndexOf('-')) || "";
      options.section = section;
      var questionsClearUrlEl = $('clear-questions-data');
      options.questionsClearUrl = questionsClearUrlEl &amp;&amp; questionsClearUrlEl.value;
      var questionDeleteUrlEl = $('delete-question-data');
      options.questionDeleteUrl = questionDeleteUrlEl &amp;&amp; questionDeleteUrlEl.value;
      options.buildModulesUrl = new XWiki.Document('CarePathways', 'PhenoTips').getURL('get');
      new PhenoTips.widgets.carePathways.VariantAnalysisModule(module, options);
    });
    return true;
  };

  (XWiki.domIsLoaded &amp;&amp; init()) || document.observe('xwiki:dom:loaded', init);

  // End PhenoTips augmentation.
  return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>Care Pathways variant analysis module widget</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.CarePathways</name>
    <number>6</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>bb5650f9-cfc6-4c61-910b-af451bb0616a</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function(PhenoTips) {
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
  //Care Pathways.
  var cp = widgets.carePathways = widgets.carePathways || {};

  cp.MultiPicker = Class.create({
    initialize : function(container, options) {
      this._container = container;
      this._qualifierCount = 0;
      this._getCount = options.getCount || function() { return this._qualifierCount; };
      this._updateCount = options.updateCount || function(count) { this._qualifierCount = count; };
      this._incrementCount = options.incrementCount || function() { this._qualifierCount++; };
      this._deleteQualifierAction = options.deleteQualifier;
      this._qualifierDataMarker = options.qualifierDataMarker;
      this._dataElements = options.dataElements || {};
      this._dataName = options.dataName;

      this._setStoredValues(options.storedDataEl);
      this._attachClickListeners();
    },

    _setStoredValues : function(storedDataEl) {
      if (storedDataEl) {
        var storedStr = storedDataEl.value;
        storedDataEl.remove();
        var storedJson = JSON.parse(storedStr || "[]");
        var _this = this;
        storedJson.each(function(elem) {
          var term = elem[_this._dataName];
          var target = _this._container.down('span.term-picker.' + term);
          target &amp;&amp; _this._insertDataElements.bind(_this, term, elem.count, target, target.down('input[type="checkbox"]'), elem)();
        });
        // Importing already saved data.
        Event.fire(document, "xwiki:document:saved");
      }
    },

    _attachClickListeners : function() {
      var _this = this;
      this._container.observe('click', function(event) {
        if (event.target.type !== "checkbox") {
          event.stop();
        }
        var target = event.findElement('span.term-picker');
        if (target) {
          _this._toggleSelected.bind(_this, target)();
        }
      });
    },
    
    _toggleSelected : function(target) {
      var checkbox = target.down('input[type="checkbox"]');
      if (target.hasClassName('selected')) {
        this._deleteElData(target, checkbox);
      } else {
        var pickedEl = target.down('input.selected-item-id');
        this._insertDataElements(pickedEl.value, this._getCount(), target, checkbox, {});
      }
    },

    _insertDataElements : function(pickedElVal, count, target, checkbox, storedData) {
      var _this = this;
      if (target.disabled) { return; }
      $H(this._dataElements).each(function(pair) {
        var propName = pair.key;
        var propValue = storedData[propName] || pair.value;
        if (propValue !== undefined &amp;&amp; propValue !== null) {
          var dataEl = new Element('input', {'type' : 'hidden', 'class' : propName + '-stored-value', 'name' : _this._qualifierDataMarker + '_' + count + '_' + propName, 'value' : propValue});
          target.insert(dataEl);
        }
      });
      target.addClassName('selected');
      checkbox &amp;&amp; (checkbox.checked = true);
      var pickedDataEl = new Element('input', {'type' : 'hidden', 'class' : this._dataName + '-stored-value', 'name' : this._qualifierDataMarker + '_' + count + '_' + this._dataName, 'value' : pickedElVal});
      var countEl = new Element('input', {'type' : 'hidden', 'class' : this._dataName + '-count', 'value' : count});
      target.insert(pickedDataEl).insert(countEl);
      count &gt;= _this._getCount() &amp;&amp; _this._updateCount(++count);
    },

    _deleteElData : function(target, checkbox) {
      var elCount = target.down('input.' + this._dataName + '-count');
      if (!target.disabled &amp;&amp; elCount &amp;&amp; this._deleteQualifierAction) {
        var url = this._deleteQualifierAction.replace(/([&amp;?]classid=)(xXx__COUNT_TEMPLATE__xXx)([&amp;$])/, "$1" + elCount.value + "$3");
        jQuery.ajax(url, {
          method: "GET", 
          beforeSend: function () {
            target.disabled = true;
            target.down('label').hide();
            target.insert(new Element('span', {'class' : "fa fa-lg fa-spinner fa-spin fa-fw"}));
          }
        })
        .always(function () {
          target.down('.fa-spinner').remove();
          target.down('label').show();
          target.disabled = false;
        })
        .done(function (data, textStatus, jqXHR) {
          target.select('input[type="hidden"]:not(".selected-item-id")').each(function(hiddenEl) {
            hiddenEl.remove();
          });
          target.removeClassName('selected');
          checkbox &amp;&amp; (checkbox.checked = false);
        });
      }
    }
  });

  // End PhenoTips augmentation.
  return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>Care Pathways picker widget</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.CarePathways</name>
    <number>7</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>883b6583-8c2a-4cab-a751-175db7cd1f3f</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>document.on("xwiki:dom:loaded", function(event) {
  var updateSaveAndViewAction = function() {
    var redirects = $$('input[name="xredirect"]');
    var redirect = redirects &amp;&amp; redirects.length &gt; 0 &amp;&amp; redirects[0];
    var cpredirects = $$('input[name="cpredirect"]');
    var cpredirect = cpredirects &amp;&amp; cpredirects.length &gt; 0 &amp;&amp; cpredirects[0];
    if (cpredirect &amp;&amp; redirect) {
      redirect.value = cpredirect.value;
    }
  };

  var updatePatientRecordActions = function() {
    var recordActions = $('patient-record-actions');
    var documentAuthors = $('document-authors');
    if (documentAuthors) {
      documentAuthors.show();
    }
    if (recordActions) {
      var listElem = recordActions.down('ul');
      var listItems = listElem &amp;&amp; listElem.childElements();
      listItems &amp;&amp; listItems.each(function(listElem) {
        var editAction = listElem.down('#prActionEdit');
        if (!editAction &amp;&amp; !listElem.down('input[name="action_saveandcontinue"]')) {
          listElem.hide();
        } else {
          var cpActionEditItems = $$('input[name="cpActionEdit"]');
          var cpActionEdit = cpActionEditItems &amp;&amp; cpActionEditItems.length &amp;&amp; cpActionEditItems[0];
          if (editAction &amp;&amp; cpActionEdit) {
            editAction.href = cpActionEdit.value;
          }
        }
      });
      recordActions.show();
    }
  };

  var hideSectionEditButtons = function() {
    var currentContainer = $('care-pathways-posttest-container') || $('care-pathways-pretest-container');
    currentContainer &amp;&amp; currentContainer.select('h2 a.action-edit').each(function(editIcon) {
      editIcon.hide();
    });
  };

  updateSaveAndViewAction();
  updatePatientRecordActions();
  hideSectionEditButtons();
});</code>
    </property>
    <property>
      <name>Edit save actions</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.CarePathways</name>
    <number>8</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>bb2cf944-dfc9-454d-ade6-b6652fceab8a</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var PhenoTips = (function(PhenoTips) {
  // Start XWiki augmentation
  var widgets = PhenoTips.widgets = PhenoTips.widgets || {};
  // Care Pathways.
  var cp = widgets.carePathways = widgets.carePathways || {};
  
  cp.RemoteDuplicatesValidator = Class.create({
    // Constants.
    NEW                  : "NEW",
    CHECKING             : "CHECKING",
    DONE                 : "DONE", 
    UNIQUE_CLASS         : "LV_CPMatchingVariants_unique",
    DUPLICATE_CLASS      : "LV_CPMatchingVariants_duplicate",

    initialize : function(input, selector, message, options) {
      this.options = options || {};
      this.serviceUrl = options.serviceUrl;
      if (!this.serviceUrl) { return; }
      
      this.input = input;
      this.novel = true;
      this.state = this.NEW;
      this.value = input.value;
      this.selector = selector;
      this.message = message;            
      this.hiddenElems = [];
      
      if (!this.input.__validation &amp;&amp; this.input.type !== "hidden") {
        try {
          this.input.__validation = new LiveValidation(this.input, {validMessage: '', wait : 500});
        }
        catch(err) {
          //console.log(err);
        }
      }

      this.input.__validation &amp;&amp; this.input.__validation.add(this.validate.bind(this));
    },

    check : function() {
      if (this.input.value !== this.value) {
        this.value = this.input.value;
        this.state = this.CHECKING;
        var _this = this;
        jQuery.ajax(this.serviceUrl + this.value, {
          method: "POST",
        }).done(function(data, textStatus, jqXHR) {
          _this._toggleDuplicate.bind(_this, data)();
        }).always(function() {
          _this.responded.bind(_this)();
          var currentMsgEl = _this.input.next('span');
          var currentMsg = currentMsgEl &amp;&amp; currentMsgEl.innerHTML || "";
          if (currentMsg !== "" &amp;&amp; currentMsg !== _this.message) {
            // If some other validation failed, and that failure message is displayed, it will be misleading to show 
            // actions associated with this validation.
            _this.hiddenElems &amp;&amp; _this._showDataElements(_this.hiddenElems);
            _this.options.addOnWarnButtons &amp;&amp; _this._removeActionButtons(_this.options.addOnWarnButtons);
          }
        });
      }    
    },

    _hideDataElements : function(elements) {
      elements.each(function(hiddenElem) {
        hiddenElem.addClassName('hidden');
      });
    },

    _showDataElements : function(elements) {
      elements.each(function(hiddenElem) {
        hiddenElem.removeClassName('hidden');
      });
    },

    _addActionButtons : function(buttons, data) {      
      this.options.addOnWarnButtonsContainer &amp;&amp; this.options.addOnWarnButtonsContainer.insert(buttons) || this.input.insert({'after' : buttons});
      buttons.observe('click', function(event) {
        var button = event.findElement('.button');
        button &amp;&amp; button.clickAction &amp;&amp; button.clickAction(data);
      });
    },

    _removeActionButtons: function(buttons) {
      buttons.up() &amp;&amp; buttons.remove();
    },

    _toggleDuplicate : function(matchingData) {            
      if (Object.keys(matchingData).length) {
        this._markDuplicate(matchingData);
      } else {
        this._markUnique();
      }
    },

    _markDuplicate : function(matchingData) {
      this.hiddenElems = this.options.hideOnWarnFx &amp;&amp; this.options.hideOnWarnFx() || [];
      this.input.removeClassName(this.UNIQUE_CLASS);
      this.input.addClassName(this.DUPLICATE_CLASS);
      this.isDuplicate();
      this.hiddenElems &amp;&amp; this._hideDataElements(this.hiddenElems);      
      this.options.addOnWarnButtons &amp;&amp; this._addActionButtons(this.options.addOnWarnButtons, matchingData);
    },

    _markUnique : function() {
      this.input.removeClassName(this.DUPLICATE_CLASS);
      this.input.addClassName(this.UNIQUE_CLASS);
      this.isUnique();
      this.hiddenElems &amp;&amp; this._showDataElements(this.hiddenElems);
      this.options.addOnWarnButtons &amp;&amp; this._removeActionButtons(this.options.addOnWarnButtons);
    },

    isUnique : function() {
      this.novel = true;
    },

    isDuplicate : function() {
      this.novel = false;
    },

    responded : function() {
      this.state = this.DONE;
      this.input.__validation.validate();
    },

    validate : function(value) {
      if (value.blank()) {
        return true;
      }
      if (this.state === this.DONE &amp;&amp;
          this.value === value &amp;&amp;         
          !this.novel) {        
        Validate.fail(this.message);        
      }
      this.check();
      return true;
    }
  });

  // End PhenoTips augmentation
  return PhenoTips;
}(PhenoTips || {}));</code>
    </property>
    <property>
      <name>Ajax duplicates validator</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.CarePathways</name>
    <number>9</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>a3e85fbe-d1d9-4acd-8f7a-cdc2aeb3a2ba</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>var XWiki = (function(XWiki) {
  var addInputValidator = function(element) {
    if (!element.__validation) {
      element.__validation = new LiveValidation(element, {validMessage: '', wait : 500});
    }
    element.__validation.add(Validate.Presence, {failureMessage: "$escapetool.javascript($services.localization.render('phenotips.PatientSheetCode.failureEnterValue'))"});
  };

  var addFuzzyDateValidator = function(element) {
    if (!element.__validation) {
      element.__validation = new LiveValidation(element, {validMessage: '', wait : 500});
    }
    element.__validation.add(Validate.Presence, {failureMessage: "$escapetool.javascript($services.localization.render('phenotips.PatientSheetCode.failureSelectValue'))"});

    var fuzzyDiv = element.previous('div.fuzzy-date-picker');
    element.value = element.value === "{}" ? "" : element.value;
    if (fuzzyDiv) {
      fuzzyDiv.toggleClassName("invalid", element.value === "");
      element.observe("xwiki:date:changed", function(event) {
        fuzzyDiv.toggleClassName("invalid", !element.__validation.validate());
        element.__validation.validate();
      });
    }
  };

  var init = function(event) {
    ((event &amp;&amp; event.memo.elements) || [$('body')]).each(function(item) {
      if (item.hasClassName("summary-item")) {
        item.__validated_Elems = [];
        item.select(".mandatory input.tt-input").each(function(element) {
          addInputValidator(element);
          item.__validated_Elems.push(element);
        });
        // A bit of a hack. If this is not done, scrollValidation will encounter an exception (typeahead has multiple inputs).
        item.select(".mandatory input.tt-hint").each(function(element) {
          if (!element.__validation) {
            element.__validation = new LiveValidation(element, {validMessage: '', wait : 500});
          }
        });
        item.select(".mandatory-date input.fuzzy-date").each(function(element) {
          addFuzzyDateValidator(element);
          item.__validated_Elems.push(element);
        });
        item.select(".mandatory select").each(function(element) {
          if (!element.__validation) {
            element.__validation = new LiveValidation(element, {validMessage: '', wait : 500});
          }
          element.__validation.add(Validate.Presence, {failureMessage: "$escapetool.javascript($services.localization.render('phenotips.PatientSheetCode.failureSelectValue'))"});
        });
        item.__validate();
      } else {
        item.select(".mandatory input[type='text']").each(function(element) {
          addInputValidator(element);
        });
      }
    });
    return true;
  };

  (XWiki.domIsLoaded &amp;&amp; init()) || document.observe("xwiki:dom:loaded", init);
  document.observe("xwiki:dom:updated", init);

  // End XWiki augmentation.
  return XWiki;
}(XWiki || {}));</code>
    </property>
    <property>
      <name>Initialize validators</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.CarePathways</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>32a05e52-7c49-4f3d-a80a-dc319dda42af</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')

.main table {
  margin: 0;
}

.table {
  display: table;
  width: 100%;
  border-collapse: separate;
  border-spacing: 2.5px;
}

.table-row {
  display: table-row;
}

.table-cell {
  display: table-cell;
}

.menu-horizontal > ul ul {
  margin: .25em 0 0 -6.7em;
}

input[type='checkbox'],
input[type='radio'] {
  margin-right: .5em;
}
/**********************************************************************************************
 * Survey css.
 */

.care-pathways-loading {
  display: inline-block;
  width: 100%;
  text-align: center;
  font-weight: bold;
  padding: 1em 0 1em 0;;
  background-color: $theme.borderColor;
}
.care-pathways-questionnaire.generating .care-pathways-module-group-container {
  display: none;
}
table.care-pathways-module-group-container,
table.care-pathways-analysis-container {
  border-collapse: separate;
  border-spacing: 2.5px;
  background-color: $theme.borderColor;
  margin: 0;
}
tr.care-pathways-modules td.selector-panel {
  background-color: $theme.pageContentBackgroundColor;
  padding: 0;
}
tr.care-pathways-modules td.cp-categories {
  vertical-align: top;
  width: 30%;
  min-width: 400px;
}
tr.care-pathways-modules td.cp-categories div.cp-categories-panel li.term-entry span.expand-tool {
  margin: 0.5em;
  font-size: inherit;
}
tr.care-pathways-modules td.cp-current-selection {
  vertical-align: top;
}
tr.care-pathways-modules td.cp-current-selection div.current-selection-panel {
  padding-left: 15px;
}
tr.care-pathways-section-label {
  height: 2.0em;
  color: #000;
  font-size: 130%;
}
tr.care-pathways-section-label td {
  padding: 10px 10px 0 10px;
}
tr.care-pathways-modules li &gt; h3,
tr.care-pathways-modules td &gt; h3 {
  font-size: 0.8em;
  letter-spacing: 0;
  margin: 0 !important;
  padding: 5px 20px 5px 15px;
  text-align: left;
  text-transform: uppercase;
  background-color: $theme.fieldGradientColor;
  color: $theme.panelHeaderTextColor;
  text-shadow: 0 1px 0 $theme.panelHeaderGradientColor;
}
/**********************************************************************************************
 * Qualifiers css.
 */

table.summary-group {
  width: 90%;
  margin-top: 0.5em;
  margin-bottom: 0.5em;
}
table.terms-data-table {
  max-width: 700px;
  width: 100%;
  margin: 0;
}
table.terms-data-table tr td {
  border: none;
}
table.summary-group td.add-button-holder span.patient-details-add {
  float: left;
  margin-left: 2em;
  font-size: 87.5%;
}
table.summary-group span.action-done,
table.summary-group span.action-edit {
  float: right;
}
table.summary-group div.summary-item {
  background-color: $theme.panelCollapsedBackgroundColor;
  background-position: left center;
  background-repeat: no-repeat;
  border-radius: 0 .5em .5em .5em;
  border: 1px solid #FFF;
  color: $theme.textColor;
  font-size: 87.5%;
  margin-left: 20px;
  padding: .5em 20px;
  position: relative;
}
table.summary-group div.summary-item.blurred {
  cursor: pointer;
}
div.summary-item div.clearfloats {
  margin: 0;
}
table.summary-group div.summary-item span.parent-dialog-delete,
table.summary-group tr.term-holder span.patient-term-delete {
  color: $theme.notificationErrorColor;
}

.care-pathways-module-container-view table.summary-group tr.term-holder label {
  width: 100%;
  font-weight: normal;
  margin-left: .5em;
}

.care-pathways-module-container-view table.terms-data-table td.no-data {
  padding: 1em;
}

tr.care-pathways-module-container table.summary-group div.summary-item div.fuzzy-date-picker {
  display: inline-block;
}

tr.care-pathways-module-container table.summary-group div.summary-item span.parent-paste-last-date-button {
  margin-left: .5em;
  cursor: pointer;
}

tr.care-pathways-module-container table.summary-group div.summary-item.blurred dl,
tr.care-pathways-module-container-view table.summary-group div.summary-item dl {
  display: inline-block;
  margin: .2em;
  vertical-align: middle;
}
tr.care-pathways-module-container table.summary-group div.summary-item.blurred dt,
tr.care-pathways-module-container-view table.summary-group div.summary-item dt {
  margin: 0 0 0 .5em;
  border-bottom-left-radius: .3em;
  border-top-left-radius: .3em;
}
tr.care-pathways-module-container table.summary-group div.summary-item.blurred dl:first-child,
tr.care-pathways-module-container-view table.summary-group div.summary-item dl:first-child {
  margin-left: 0;
}
tr.care-pathways-module-container table.summary-group div.summary-item.blurred dd,
tr.care-pathways-module-container-view table.summary-group div.summary-item dd {
  margin: 0;
  border-bottom-right-radius: .3em;
  border-top-right-radius: .3em;
}
tr.care-pathways-module-container table.summary-group div.summary-item.blurred dt.hidden + dd + dd.preview,
tr.care-pathways-module-container-view table.summary-group div.summary-item dt.hidden + dd {
  margin: 0;
  border-bottom-left-radius: .3em;
  border-top-left-radius: .3em;
}
tr.care-pathways-module-container table.summary-group div.summary-item.blurred dt,
tr.care-pathways-module-container table.summary-group div.summary-item.blurred dd,
tr.care-pathways-module-container-view table.summary-group div.summary-item dt,
tr.care-pathways-module-container-view table.summary-group div.summary-item dd {
  display: inline-block;
  background-color: $theme.pageContentBackgroundColor;
  float: left;
  padding: .3em;
  clear: none;
}
tr.care-pathways-module-container table.summary-group div.summary-item dt,
tr.care-pathways-module-container table.summary-group div.summary-item dd {
  margin-top: .4em;
  margin-bottom: .4em;
}
tr.care-pathways-module-container table.summary-group div.summary-item dt {
  float: left;
  clear: left;
}
tr.care-pathways-module-container table.summary-group div.summary-item.focused dt:not(.inline) {
  width: 100%;
}
tr.care-pathways-module-container table.summary-group div.summary-item.blurred p.cp-hideable-warningmessage {
  display: none;
}
table.summary-group div.summary-item.focused dt.collapsible span.selected-value {
  font-weight: normal;
  margin-left: .5em;
}
table.summary-group div.summary-item.focused dt.collapsible span.collapse-button {
  margin-right: .5em;
}
table.summary-group div.summary-item.focused dd.comments textarea {
  min-height: 50px;
}
table.summary-group div.summary-item.focused dt.inline {
  margin-right: .5em;
}
table.summary-group div.summary-item.blurred dd,
table.summary-group div.summary-item.focused dd.inline {
  float: left;
}
table.summary-group div.summary-item.focused dd.inline select {
  padding: 0;
}
table.summary-group div.summary-item ul {
  list-style-type: none;
  padding-left: 1em;
  margin-left: 0;
}
.category-data .clickable:hover {
  cursor: pointer;
}
.category-data label.clickable.disabled {
  color: #CCC;
  cursor: default;
}
table.summary-group td.add-button-holder span.patient-details-add {
  cursor: pointer;
}
/**********************************************************************************************
 * Typeahead css.
 */

table.summary-group div.summary-item.focused dd.inline.datum,
table.summary-group div.summary-item.focused dd.inline.laboratory {
  width: 60%;
}
span.scrollable-typeahead {
  width: 100%;
}
span.twitter-typeahead {
  width: 100%;
}
span.scrollable-typeahead div.tt-menu {
  max-height: 100px;
  overflow-y: auto;
  width: 100%;
  background-color: $theme.pageContentBackgroundColor;
  border: solid 1px $theme.backgroundSecondaryColor;
  border-radius: 5px;
}
span.scrollable-typeahead div.tt-menu div.tt-suggestion {
  padding: 2.5px 10px;
  cursor: pointer;
}
span.scrollable-typeahead div.tt-menu h3.user-entered-data {
  color: $theme.panelHeaderTextColor;
  margin: 0;
  padding: 0 10px;
  font-size: inherit;
  background-color: $theme.highlightColor;
}

/**********************************************************************************************
* Fuzzy date picker css.
*/
.fuzzy-date-picker select {
  font-family: Arial,Verdana,sans-serif;
}
.fuzzy-date-picker .year {
  font-size: 14px;
  max-width: 68px;
}
.fuzzy-date-picker .month {
  font-size: 14px;
  max-width: 48px;
}
.fuzzy-date-picker .day {
  font-size: 14px;
  max-width: 48px;
}
.fuzzy-date-picker .empty {
  font-size: .7em;
  opacity: .5;
}
.fuzzy-date-picker .year option {
  /*text-indent: 1em;*/
}
.fuzzy-date-picker .year .decade {
  font-weight: bold;
  /*text-indent: 0;*/
}
.fuzzy-date-picker .year .century {
  font-weight: bold;
  /*text-indent: 0;*/
}
.fuzzy-date-picker .year:disabled {
  opacity: .5 !important;
}
.fuzzy-date-picker .month:disabled {
  opacity: .5 !important;
}
.fuzzy-date-picker .day:disabled {
  opacity: .5 !important;
}

/**********************************************************************************************
* Selects validation css.
*/
select.LV_invalid_field,
div.fuzzy-date-picker.invalid {
  background-color: $theme.highlightColor !important;
  border: 1px solid $theme.notificationErrorColor;
  color: $theme.textColor !important;
}
select + .LV_validation_message {
  float: right;
}
.LV_validation_message {
  line-height: 1em;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>Care Pathways survey styles</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.CarePathways</name>
    <number>1</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>d31fabab-df3e-42df-b82e-39cb0866166d</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')

tr.family-care-subtitle .table-cell,
tr.care-pathways-family-module-container .table-cell,
tr.care-pathways-family-module-container-view .family-test-data.table-cell {
  padding: 1em 1em 1em 2em;
}

tr.care-pathways-family-module-container-view td.family-test-data table td {
  border: none;
}

tr.care-pathways-family-module-container .table-cell,
tr.care-pathways-family-module-container-view .table-cell {
  background-color: $theme.pageContentBackgroundColor;
}

tr.care-pathways-family-module-container .term-picker {
  padding: 10px 0 10px 0;
  width: 6em;
  display: inline-block;
  text-align: center;
  cursor: pointer;
  border: 1px solid;
  border-color: $theme.buttonSecondaryBackgroundColor;
  color: $theme.textColor;
}

tr.care-pathways-family-module-container .term-picker input {
  padding: 0;
  margin: 0 .5em 0 0;
}

tr.care-pathways-family-module-container-view .affected-family-member {
  padding: 5px;
  width: 60px;
  text-align: center;
}

tr.care-pathways-family-module-container-view .family-test-name {
  width: 290px;
}

tr.care-pathways-family-module-container-view .affected-family-member,
tr.care-pathways-family-module-container .term-picker.selected {
  background-color: $theme.panelCollapsedBackgroundColor;
}

(tr.care-pathways-family-module-container .term-picker) + (tr.care-pathways-family-module-container .term-picker) {
  margin: 0 .1em 0 .1em;
}

tr.family-care-subtitle .table-cell {
  padding: 1em 0 .5em .5em;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>Care Pathways picker widget</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
